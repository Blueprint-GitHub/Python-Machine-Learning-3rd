{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["zIZTmSipsheU","o3841SH1sjLG","yM-3P5ghx6qS","hZUnRC0czdtz","_gP5dRg21yHP","g0LyxwXp_2E_"],"gpuType":"T4","authorship_tag":"ABX9TyNZE3eyphbpVhFsjzBfa1pt"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"nGzc56Nmpn6x"},"outputs":[],"source":["!pip install autokeras"]},{"cell_type":"code","source":["import tensorflow as tf\n","import autokeras as ak\n","import keras_tuner as kt\n","import numpy as np\n","import matplotlib.pyplot as plt"],"metadata":{"id":"WCLHLtfcpuPL","executionInfo":{"status":"ok","timestamp":1701256305703,"user_tz":-540,"elapsed":7920,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"0babf9b8-c16c-4c84-a110-28070fc34d2f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Using TensorFlow backend\n"]}]},{"cell_type":"code","source":["%matplotlib inline #그래프가 셀에서 바로 나오도록(기본 설정 같기도 함)"],"metadata":{"id":"9vGxIPiYrWI1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **SKlearn 사용 기본 예시**"],"metadata":{"id":"zIZTmSipsheU"}},{"cell_type":"code","source":["from sklearn.datasets import load_digits\n","from sklearn.model_selection import train_test_split\n","\n","digits = load_digits()\n","images, labels = digits.images, digits.target\n","\n","n_samples = len(images)\n","X = images.reshape((n_samples, -1))\n","\n","X_train, X_test, y_train, y_test = train_test_split(\n","    X, labels, test_size=0.2, shuffle=False)"],"metadata":{"id":"48-eVP2nrBM7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["n = 20\n","_, axes = plt.subplots(2, 10, figsize=(10, 2))\n","plt.tight_layout()\n","for i in range(n):\n","    row, col = i // 10, i % 10\n","    axes[row, col].set_axis_off()\n","    axes[row, col].imshow(\n","        images[\n","            i,\n","        ],\n","        cmap=plt.cm.gray_r,\n","        interpolation=\"nearest\",\n","    )\n","    axes[row, col].set_title(\"Label: %i\" % labels[i])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eVe25Ic4rUie","executionInfo":{"status":"ok","timestamp":1701153974420,"user_tz":-540,"elapsed":2464,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"77835038-d81b-4263-9d09-846ff4002157"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x200 with 20 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.svm import SVC\n","from sklearn.ensemble import RandomForestClassifier\n","from keras_tuner.engine import hyperparameters as hp\n","\n","'''\n","아래와 같이 svm을 선택할때는 conditional_scope로 svm의 hp를 튜닝하고\n","random_forest를 선택할때는 random_forest의 hp를 튜닝하도록 한다.\n","'''\n","def build_model(hp):\n","    model_type = hp.Choice(\"model_type\", [\"svm\", \"random_forest\"])\n","    if model_type == \"svm\":\n","        with hp.conditional_scope(\"model_type\", \"svm\"):\n","            model = SVC(\n","                C=hp.Float(\"C\", 1e-3, 10, sampling=\"linear\", default=1),\n","                kernel=hp.Choice(\"kernel_type\", [\"linear\", \"rbf\"], default=\"linear\"),\n","                random_state=42,\n","            )\n","    elif model_type == \"random_forest\":\n","        with hp.conditional_scope(\"model_type\", \"random_forest\"):\n","            model = RandomForestClassifier(\n","                n_estimators=hp.Int(\"n_estimators\", 10, 200, step=10),\n","                max_depth=hp.Int(\"max_depth\", 3, 10),\n","            )\n","    else:\n","        raise ValueError(\"Unrecognized model_type\")\n","    return model"],"metadata":{"id":"NHOgKkjzrfQV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import KFold\n","import sklearn.pipeline\n","\n","# 여기서 kt.tuners를 SKlearnTuner로 설정한다.\n","random_tuner = kt.tuners.SklearnTuner(\n","    oracle=kt.oracles.RandomSearchOracle(\n","        objective=kt.Objective(\"score\", \"max\"), max_trials=30, seed=42\n","    ),\n","    hypermodel=build_model,\n","    cv=KFold(3, shuffle=True, random_state=42),\n","    overwrite=True,\n","    project_name=\"random_tuner\",\n",")\n","\n","random_tuner.search(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-PC1ofHxsBDx","executionInfo":{"status":"ok","timestamp":1701154237460,"user_tz":-540,"elapsed":17712,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"916a4312-7299-41d3-e963-9a305f065829"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Trial 30 Complete [00h 00m 01s]\n","score: 0.9575504523312457\n","\n","Best score So Far: 0.9937369519832986\n","Total elapsed time: 00h 00m 18s\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score\n","\n","best_model = random_tuner.get_best_models(1)[0]\n","best_model.fit(X_train, y_train)\n","y_pred_test = best_model.predict(X_test)\n","test_acc = accuracy_score(y_test, y_pred_test)\n","print(\"The prediction accuracy on test set: {:.2f} %\".format(test_acc * 100))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zuP_nD0-sBAG","executionInfo":{"status":"ok","timestamp":1701154241276,"user_tz":-540,"elapsed":428,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"a25998bd-98e5-435c-fd8c-77fb1c40d1bd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The prediction accuracy on test set: 95.83 %\n"]}]},{"cell_type":"markdown","source":["# **SKlearn 파이프라인 선택 및 튜닝**"],"metadata":{"id":"o3841SH1sjLG"}},{"cell_type":"code","source":["from keras_tuner.engine import hyperparameters as hp\n","from sklearn.decomposition import PCA\n","from sklearn.svm import SVC\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.pipeline import Pipeline\n","\n","#예를 들어 pca + svm 아니면 pca + randomforest를 사용하고 싶다면??\n","\n","def build_pipeline(hp):\n","\n","    # select hyperparameters of PCA\n","    n_components = hp.Choice(\"n_components\", [2, 5, 10], default=5)\n","    pca = PCA(n_components=n_components)\n","\n","    # select model type\n","    model_type = hp.Choice(\"model_type\", [\"svm\", \"random_forest\"])\n","    if model_type == \"svm\":\n","        with hp.conditional_scope(\"model_type\", \"svm\"):\n","            model = SVC(\n","                C=hp.Float(\"C\", 1e-3, 10, sampling=\"linear\", default=1),\n","                kernel=hp.Choice(\"kernel_type\", [\"linear\", \"rbf\"], default=\"linear\"),\n","                random_state=42,\n","            )\n","    elif model_type == \"random_forest\":\n","        with hp.conditional_scope(\"model_type\", \"random_forest\"):\n","            model = RandomForestClassifier(\n","                n_estimators=hp.Int(\"n_estimators\", 10, 200, step=10),\n","                max_depth=hp.Int(\"max_depth\", 3, 10),\n","            )\n","    else:\n","        raise ValueError(\"Unrecognized model_type\")\n","\n","    # create pipeline, 이름을 정하지 않는 make_pipeline도 사용 가능\n","    pipeline = Pipeline([(\"pca\", pca),\n","                         (\"clf\", model)])\n","\n","    return pipeline\n","\n","#간단하게 오라클을 변경해 hyperband,bayesian,randomsearch등을 사용할 수 있다.\n","tuner = kt.tuners.SklearnTuner(\n","    oracle=kt.oracles.BayesianOptimizationOracle(\n","        objective = kt.Objective(\"score\", \"max\"),\n","        max_trials=30,\n","        seed = 42),\n","    hypermodel=build_pipeline,\n","    cv = KFold(3, shuffle=True, random_state=42),\n","    overwrite=True,\n",")\n","tuner.search(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TNxwbFy9vZ1U","executionInfo":{"status":"ok","timestamp":1701155650018,"user_tz":-540,"elapsed":41404,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"6f1853dd-3329-4042-b02e-b05c570ab2e4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Trial 30 Complete [00h 00m 01s]\n","score: 0.9812108559498957\n","\n","Best score So Far: 0.9832985386221295\n","Total elapsed time: 00h 00m 41s\n"]}]},{"cell_type":"markdown","source":["# **[중요]Automatic Feature Engineering**"],"metadata":{"id":"yM-3P5ghx6qS"}},{"cell_type":"code","source":["import tensorflow as tf\n","\n","#타이타닉 데이터 셋\n","TRAIN_DATA_URL = \"https://storage.googleapis.com/tf-datasets/titanic/train.csv\"\n","TEST_DATA_URL = \"https://storage.googleapis.com/tf-datasets/titanic/eval.csv\"\n","\n","train_file_path = tf.keras.utils.get_file(\"train.csv\", TRAIN_DATA_URL)\n","test_file_path = tf.keras.utils.get_file(\"eval.csv\", TEST_DATA_URL)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1xqiX74Qx_G_","executionInfo":{"status":"ok","timestamp":1701155766893,"user_tz":-540,"elapsed":417,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"e05ca81f-6de9-4424-c872-4e69ea5b2aba"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tf-datasets/titanic/train.csv\n","30874/30874 [==============================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tf-datasets/titanic/eval.csv\n","13049/13049 [==============================] - 0s 0us/step\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","x_train = pd.read_csv(train_file_path)\n","y_train = x_train.pop(\"survived\")\n","y_train = pd.DataFrame(y_train)\n","\n","x_test = pd.read_csv(test_file_path)\n","y_test = x_test.pop(\"survived\")\n","\n","x_train.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"ZtMe_QmsyPSq","executionInfo":{"status":"ok","timestamp":1701155789164,"user_tz":-540,"elapsed":290,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"4e08dad7-f6bf-464e-e17b-18b5b44e0203"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      sex   age  n_siblings_spouses  parch     fare  class     deck  \\\n","0    male  22.0                   1      0   7.2500  Third  unknown   \n","1  female  38.0                   1      0  71.2833  First        C   \n","2  female  26.0                   0      0   7.9250  Third  unknown   \n","3  female  35.0                   1      0  53.1000  First        C   \n","4    male  28.0                   0      0   8.4583  Third  unknown   \n","\n","   embark_town alone  \n","0  Southampton     n  \n","1    Cherbourg     n  \n","2  Southampton     y  \n","3  Southampton     n  \n","4   Queenstown     y  "],"text/html":["\n","  <div id=\"df-6b192da8-2f98-4921-9c6e-bba8c3318d84\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sex</th>\n","      <th>age</th>\n","      <th>n_siblings_spouses</th>\n","      <th>parch</th>\n","      <th>fare</th>\n","      <th>class</th>\n","      <th>deck</th>\n","      <th>embark_town</th>\n","      <th>alone</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>Third</td>\n","      <td>unknown</td>\n","      <td>Southampton</td>\n","      <td>n</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>First</td>\n","      <td>C</td>\n","      <td>Cherbourg</td>\n","      <td>n</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>Third</td>\n","      <td>unknown</td>\n","      <td>Southampton</td>\n","      <td>y</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>First</td>\n","      <td>C</td>\n","      <td>Southampton</td>\n","      <td>n</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>male</td>\n","      <td>28.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.4583</td>\n","      <td>Third</td>\n","      <td>unknown</td>\n","      <td>Queenstown</td>\n","      <td>y</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6b192da8-2f98-4921-9c6e-bba8c3318d84')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6b192da8-2f98-4921-9c6e-bba8c3318d84 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6b192da8-2f98-4921-9c6e-bba8c3318d84');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0a3d12ef-8b79-4593-914c-9d3c87ff8292\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0a3d12ef-8b79-4593-914c-9d3c87ff8292')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0a3d12ef-8b79-4593-914c-9d3c87ff8292 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["from sklearn.preprocessing import OrdinalEncoder, OneHotEncoder, StandardScaler\n","from sklearn.impute import SimpleImputer\n","from sklearn.pipeline import Pipeline\n","\n","#기본적인 전처리 파이프라인\n","numerical_columns = [\"age\", \"fare\"]\n","one_hot_columns = [\"n_siblings_spouses\", \"class\"]\n","int_columns = [\"sex\", \"parch\", \"deck\", \"embark_town\", \"alone\"]\n","\n","numerical_transformer = Pipeline(steps=[\n","        (\"imputer\", SimpleImputer(strategy=\"median\")),\n","        (\"normalizer\", StandardScaler())\n","        ])\n","\n","one_hot_transformer = Pipeline(steps=[\n","        (\"imputer\", SimpleImputer(strategy=\"constant\", fill_value=\"None\")),\n","        (\"one_hot_encoder\", OneHotEncoder(handle_unknown=\"ignore\"))\n","        ])\n","\n","int_transformer = Pipeline(steps=[\n","        (\"imputer\", SimpleImputer(strategy=\"constant\", fill_value=\"None\")),\n","        (\"label_encoder\",OrdinalEncoder(handle_unknown=\"use_encoded_value\",\n","                                        unknown_value=-1))\n","        ])"],"metadata":{"id":"UzgMgSSkyWJI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.base import BaseEstimator, TransformerMixin\n","\n","# a열과 b열을 묶어서 하나의 열로(번호) 표현하는 것\n","class CategoricalCombination(BaseEstimator, TransformerMixin):\n","    def __init__(self, name_a, name_b):\n","        self.name_a = name_a\n","        self.name_b = name_b\n","        self.encoder = OrdinalEncoder(\n","            handle_unknown=\"use_encoded_value\", unknown_value=-1\n","        )\n","\n","    def fit(self, x, y=None, **kwargs):\n","        temp_column = x[self.name_a].astype(str) + x[self.name_b].astype(str)\n","        self.encoder.fit(temp_column.to_frame())\n","        return self\n","\n","    def transform(self, x, **kwargs):\n","        temp_column = x[self.name_a].astype(str) + x[self.name_b].astype(str)\n","        temp_column = self.encoder.transform(temp_column.to_frame())\n","        return temp_column\n","\n","# 도시, 수익으로 된 2개의 열을 도시 수익 평균, 수익 이렇게 바꾸는 것.\n","class MeanEncoder(BaseEstimator, TransformerMixin):\n","    def __init__(self, categorical_name, numerical_name):\n","        self.categorical_name = categorical_name\n","        self.numerical_name = numerical_name\n","        self.means = None\n","\n","    def fit(self, x, y=None, **kwargs):\n","        self.mean = x.groupby(self.categorical_name)[self.numerical_name].mean()\n","        return self\n","\n","    def transform(self, x, **kwargs):\n","        return x[self.categorical_name].map(self.mean).to_frame()"],"metadata":{"id":"n9FSNnQr0aJl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.compose import ColumnTransformer\n","\n","# 피처 전처리 및 생성\n","column_transformer = ColumnTransformer(\n","    transformers=[\n","        #   이름           적용할 변환기       적용할 열\n","        (\"numerical\", numerical_transformer, numerical_columns),\n","        (\"one_hot\", one_hot_transformer, one_hot_columns),\n","        (\"int\", int_transformer, int_columns),\n","        (\"categorical_combination\", CategoricalCombination(\"sex\", \"class\"),[\"sex\", \"class\"]),\n","        (\"mean\", MeanEncoder(\"embark_town\", \"age\"), [\"embark_town\", \"age\"])\n","        ])\n"],"metadata":{"id":"37ZRf8_q2zjc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.svm import SVC\n","from sklearn.feature_selection import SelectKBest\n","from sklearn.feature_selection import mutual_info_classif\n","\n","#이렇게 해서 하나의 파이프라인을 만들 수 있다.\n","pipeline = Pipeline(\n","    steps=[\n","        (\"preprocessing\", column_transformer),\n","        (\"feature_selection\", SelectKBest(mutual_info_classif, k=8)),\n","        (\"model\", SVC()),\n","    ]\n",")\n","pipeline.fit(x_train, y_train)"],"metadata":{"id":"HgzJHwNR6z19"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**더 나아가서...**"],"metadata":{"id":"ybIcMhnY7VUx"}},{"cell_type":"code","source":["import numpy as np\n","\n","mean_column_pairs = []\n","for int_col in int_columns:\n","    for num_col in numerical_columns:\n","        mean_column_pairs.append((int_col, num_col))\n","\n","cat_column_pairs = []\n","for index1 in range(len(int_columns)):\n","    for index2 in range(index1 + 1, len(int_columns)):\n","        cat_column_pairs.append((int_columns[index1], int_columns[index2]))\n","\n","mean_column_pairs = np.array(mean_column_pairs)\n","cat_column_pairs = np.array(cat_column_pairs)"],"metadata":{"id":"1MUEcS3a73aZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["transformers = []\n","for index, (col1, col2) in enumerate(cat_column_pairs):\n","    if not hp.Boolean(\"combine_{i}\".format(i=index)):\n","        continue\n","    col1 = str(col1)\n","    col2 = str(col2)\n","    transformers.append((col1 + col2, CategoricalCombination(col1, col2), [col1, col2]))"],"metadata":{"id":"YJwyJVJ179qW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import keras_tuner as kt\n","from sklearn.feature_selection import SelectKBest\n","from sklearn.feature_selection import mutual_info_classif\n","\n","def build_model(hp):\n","    numerical_transformer = Pipeline(steps=[\n","            (\"imputer\", SimpleImputer(strategy=\"median\")),\n","            (\"normalizer\", StandardScaler())\n","            ])\n","\n","    one_hot_transformer = Pipeline(steps=[\n","            (\"imputer\", SimpleImputer(strategy=\"constant\", fill_value=\"None\")),\n","            (\"one_hot_encoder\", OneHotEncoder(handle_unknown=\"ignore\"))\n","            ])\n","\n","    int_transformer = Pipeline(steps=[\n","            (\"imputer\", SimpleImputer(strategy=\"constant\", fill_value=\"None\")),\n","            (\"label_encoder\",OrdinalEncoder(\n","                handle_unknown = \"use_encoded_value\", unknown_value= -1))\n","            ])\n","\n","    transformers = [\n","        (\"numerical\", numerical_transformer, numerical_columns),\n","        (\"one_hot\", one_hot_transformer, one_hot_columns),\n","        (\"int\", int_transformer, int_columns)]\n","\n","    for index, (col1, col2) in enumerate(cat_column_pairs):\n","        if not hp.Boolean(\"combine_{i}\".format(i=index)):\n","            continue\n","        col1 = str(col1)\n","        col2 = str(col2)\n","        transformers.append(\n","            (col1 + col2, CategoricalCombination(col1, col2), [col1, col2]))\n","\n","    for index, (col1, col2) in enumerate(mean_column_pairs):\n","        if not hp.Boolean(\"mean_{i}\".format(i=index)):\n","            continue\n","        col1 = str(col1)\n","        col2 = str(col2)\n","        transformers.append(\n","            (col1 + col2, MeanEncoder(col1, col2), [col1, col2]))\n","\n","    # 모델 생성\n","    pipeline = Pipeline(steps=[\n","            (\"preprocessing\", ColumnTransformer(transformers = transformers)),\n","            (\"impute\", SimpleImputer(strategy = \"median\")),\n","            (\"model_selection\", SelectKBest(\n","                score_func = mutual_info_classif,\n","                k = hp.Int(\"best_k\", 5, 13 +len(transformers) - 3))),\n","            (\"model\", SVC())\n","            ])\n","    return pipeline"],"metadata":{"id":"Q_XOu1LK7Wra"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 모델 검증\n","build_model(kt.HyperParameters()).fit(x_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":390},"id":"EEiW_7EB7ZEE","executionInfo":{"status":"ok","timestamp":1701158693225,"user_tz":-540,"elapsed":548,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"e5d8ba11-82a3-40cf-fab2-e8eb414a38a3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["Pipeline(steps=[('preprocessing',\n","                 ColumnTransformer(transformers=[('numerical',\n","                                                  Pipeline(steps=[('imputer',\n","                                                                   SimpleImputer(strategy='median')),\n","                                                                  ('normalizer',\n","                                                                   StandardScaler())]),\n","                                                  ['age', 'fare']),\n","                                                 ('one_hot',\n","                                                  Pipeline(steps=[('imputer',\n","                                                                   SimpleImputer(fill_value='None',\n","                                                                                 strategy='constant')),\n","                                                                  ('one_hot_encoder',\n","                                                                   OneHotEncoder(handle_unknown='ignore'))]),\n","                                                  ['n_sibl...\n","                                                  Pipeline(steps=[('imputer',\n","                                                                   SimpleImputer(fill_value='None',\n","                                                                                 strategy='constant')),\n","                                                                  ('label_encoder',\n","                                                                   OrdinalEncoder(handle_unknown='use_encoded_value',\n","                                                                                  unknown_value=-1))]),\n","                                                  ['sex', 'parch', 'deck',\n","                                                   'embark_town', 'alone'])])),\n","                ('impute', SimpleImputer(strategy='median')),\n","                ('model_selection',\n","                 SelectKBest(k=5,\n","                             score_func=<function mutual_info_classif at 0x7b74e3017520>)),\n","                ('model', SVC())])"],"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessing&#x27;,\n","                 ColumnTransformer(transformers=[(&#x27;numerical&#x27;,\n","                                                  Pipeline(steps=[(&#x27;imputer&#x27;,\n","                                                                   SimpleImputer(strategy=&#x27;median&#x27;)),\n","                                                                  (&#x27;normalizer&#x27;,\n","                                                                   StandardScaler())]),\n","                                                  [&#x27;age&#x27;, &#x27;fare&#x27;]),\n","                                                 (&#x27;one_hot&#x27;,\n","                                                  Pipeline(steps=[(&#x27;imputer&#x27;,\n","                                                                   SimpleImputer(fill_value=&#x27;None&#x27;,\n","                                                                                 strategy=&#x27;constant&#x27;)),\n","                                                                  (&#x27;one_hot_encoder&#x27;,\n","                                                                   OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n","                                                  [&#x27;n_sibl...\n","                                                  Pipeline(steps=[(&#x27;imputer&#x27;,\n","                                                                   SimpleImputer(fill_value=&#x27;None&#x27;,\n","                                                                                 strategy=&#x27;constant&#x27;)),\n","                                                                  (&#x27;label_encoder&#x27;,\n","                                                                   OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,\n","                                                                                  unknown_value=-1))]),\n","                                                  [&#x27;sex&#x27;, &#x27;parch&#x27;, &#x27;deck&#x27;,\n","                                                   &#x27;embark_town&#x27;, &#x27;alone&#x27;])])),\n","                (&#x27;impute&#x27;, SimpleImputer(strategy=&#x27;median&#x27;)),\n","                (&#x27;model_selection&#x27;,\n","                 SelectKBest(k=5,\n","                             score_func=&lt;function mutual_info_classif at 0x7b74e3017520&gt;)),\n","                (&#x27;model&#x27;, SVC())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" ><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;preprocessing&#x27;,\n","                 ColumnTransformer(transformers=[(&#x27;numerical&#x27;,\n","                                                  Pipeline(steps=[(&#x27;imputer&#x27;,\n","                                                                   SimpleImputer(strategy=&#x27;median&#x27;)),\n","                                                                  (&#x27;normalizer&#x27;,\n","                                                                   StandardScaler())]),\n","                                                  [&#x27;age&#x27;, &#x27;fare&#x27;]),\n","                                                 (&#x27;one_hot&#x27;,\n","                                                  Pipeline(steps=[(&#x27;imputer&#x27;,\n","                                                                   SimpleImputer(fill_value=&#x27;None&#x27;,\n","                                                                                 strategy=&#x27;constant&#x27;)),\n","                                                                  (&#x27;one_hot_encoder&#x27;,\n","                                                                   OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n","                                                  [&#x27;n_sibl...\n","                                                  Pipeline(steps=[(&#x27;imputer&#x27;,\n","                                                                   SimpleImputer(fill_value=&#x27;None&#x27;,\n","                                                                                 strategy=&#x27;constant&#x27;)),\n","                                                                  (&#x27;label_encoder&#x27;,\n","                                                                   OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,\n","                                                                                  unknown_value=-1))]),\n","                                                  [&#x27;sex&#x27;, &#x27;parch&#x27;, &#x27;deck&#x27;,\n","                                                   &#x27;embark_town&#x27;, &#x27;alone&#x27;])])),\n","                (&#x27;impute&#x27;, SimpleImputer(strategy=&#x27;median&#x27;)),\n","                (&#x27;model_selection&#x27;,\n","                 SelectKBest(k=5,\n","                             score_func=&lt;function mutual_info_classif at 0x7b74e3017520&gt;)),\n","                (&#x27;model&#x27;, SVC())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" ><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">preprocessing: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;numerical&#x27;,\n","                                 Pipeline(steps=[(&#x27;imputer&#x27;,\n","                                                  SimpleImputer(strategy=&#x27;median&#x27;)),\n","                                                 (&#x27;normalizer&#x27;,\n","                                                  StandardScaler())]),\n","                                 [&#x27;age&#x27;, &#x27;fare&#x27;]),\n","                                (&#x27;one_hot&#x27;,\n","                                 Pipeline(steps=[(&#x27;imputer&#x27;,\n","                                                  SimpleImputer(fill_value=&#x27;None&#x27;,\n","                                                                strategy=&#x27;constant&#x27;)),\n","                                                 (&#x27;one_hot_encoder&#x27;,\n","                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n","                                 [&#x27;n_siblings_spouses&#x27;, &#x27;class&#x27;]),\n","                                (&#x27;int&#x27;,\n","                                 Pipeline(steps=[(&#x27;imputer&#x27;,\n","                                                  SimpleImputer(fill_value=&#x27;None&#x27;,\n","                                                                strategy=&#x27;constant&#x27;)),\n","                                                 (&#x27;label_encoder&#x27;,\n","                                                  OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,\n","                                                                 unknown_value=-1))]),\n","                                 [&#x27;sex&#x27;, &#x27;parch&#x27;, &#x27;deck&#x27;, &#x27;embark_town&#x27;,\n","                                  &#x27;alone&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" ><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">numerical</label><div class=\"sk-toggleable__content\"><pre>[&#x27;age&#x27;, &#x27;fare&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer(strategy=&#x27;median&#x27;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" ><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" ><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">one_hot</label><div class=\"sk-toggleable__content\"><pre>[&#x27;n_siblings_spouses&#x27;, &#x27;class&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-21\" type=\"checkbox\" ><label for=\"sk-estimator-id-21\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer(fill_value=&#x27;None&#x27;, strategy=&#x27;constant&#x27;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-22\" type=\"checkbox\" ><label for=\"sk-estimator-id-22\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-23\" type=\"checkbox\" ><label for=\"sk-estimator-id-23\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">int</label><div class=\"sk-toggleable__content\"><pre>[&#x27;sex&#x27;, &#x27;parch&#x27;, &#x27;deck&#x27;, &#x27;embark_town&#x27;, &#x27;alone&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-24\" type=\"checkbox\" ><label for=\"sk-estimator-id-24\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer(fill_value=&#x27;None&#x27;, strategy=&#x27;constant&#x27;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-25\" type=\"checkbox\" ><label for=\"sk-estimator-id-25\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OrdinalEncoder</label><div class=\"sk-toggleable__content\"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-26\" type=\"checkbox\" ><label for=\"sk-estimator-id-26\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer(strategy=&#x27;median&#x27;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-27\" type=\"checkbox\" ><label for=\"sk-estimator-id-27\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SelectKBest</label><div class=\"sk-toggleable__content\"><pre>SelectKBest(k=5, score_func=&lt;function mutual_info_classif at 0x7b74e3017520&gt;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-28\" type=\"checkbox\" ><label for=\"sk-estimator-id-28\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["from sklearn import metrics\n","import sklearn\n","\n","tuner = kt.SklearnTuner(\n","    kt.oracles.RandomSearchOracle(\n","        objective=kt.Objective(\"score\", \"max\"),\n","        max_trials=10,\n","    ),\n","    build_model,\n","    scoring=metrics.make_scorer(metrics.accuracy_score),\n","    overwrite=True,\n",")\n","tuner.search(x_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XMbFRsJi7Zno","executionInfo":{"status":"ok","timestamp":1701158708273,"user_tz":-540,"elapsed":11426,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"dcbb5649-7cf5-47ac-a5e7-f1561d4a4fca"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Trial 10 Complete [00h 00m 01s]\n","score: 0.7717841269841269\n","\n","Best score So Far: 0.8053714285714285\n","Total elapsed time: 00h 00m 12s\n"]}]},{"cell_type":"markdown","source":["# **사용자 정의 튜너(sklearn,keras)**"],"metadata":{"id":"e7qe4d5i1q7h"}},{"cell_type":"markdown","source":["**Note : 사용자 정의 메트릭을 사용하려면 사용자 정의 튜너를 구현해야함.**"],"metadata":{"id":"SVSV4r-n-7mk"}},{"cell_type":"markdown","source":["## **사용자 정의 Sklearn 튜너**"],"metadata":{"id":"SUcG5dYxux9h"}},{"cell_type":"code","source":["import os\n","import pickle\n","import keras_tuner as kt\n","import tensorflow as tf\n","\n","# 사용 예시\n","'''\n","사용자 정의를 위해 필요한 5가지 함수\n","이때 1. 초기화 2. 탐색을 딱히 다르게 구현하지 않는다면 생략 가능\n","1. __init__\n","2. search\n","3. run_trial\n","4. save_model\n","5. load_model\n","'''\n","class ShallowTuner(kt.Tuner):  # Tuner를 상속한다.\n","    def __init__(self, oracle, hypermodel, **kwargs):\n","        super(ShallowTuner, self).__init__(\n","            oracle=oracle, hypermodel=hypermodel, **kwargs)\n","\n","    def search(self, X, y, validation_data):\n","        \"\"\"파라미터 탐색\"\"\"\n","        return super(ShallowTuner, self).search(X, y, validation_data)\n","\n","    def run_trial(self, trial, X, y, validation_data):\n","        \"\"\"모델 구축하고 훈련 시도\"\"\"\n","        model = self.hypermodel.build(trial.hyperparameters)  # build the model\n","        model.fit(X, y)  # fit the model\n","        X_val, y_val = validation_data  # get the validation data\n","        eval_score = model.score(X_val, y_val)  # evaluate the model\n","        self.save_model(trial.trial_id, model)  # save the model to disk\n","        return {\"score\": eval_score}\n","    '''\n","    validation_data를 교차검증으로 만드는 등의 시도도 가능하다\n","    from sklearn.model_selection import KFold\n","\n","    def run_trial(self, trial, X, y, validation_data, n_splits=5):\n","        \"\"\"모델 구축하고 K-폴드 교차검증을 통해 훈련 및 평가\"\"\"\n","        kf = KFold(n_splits=n_splits)  # K-폴드 객체 생성\n","        scores = []  # 평가 점수를 저장할 리스트\n","\n","        for train_index, val_index in kf.split(X):\n","            # 데이터를 훈련 세트와 검증 세트로 분할\n","            X_train, X_val = X[train_index], X[val_index]\n","            y_train, y_val = y[train_index], y[val_index]\n","\n","            # 모델 구축\n","            model = self.hypermodel.build(trial.hyperparameters)\n","            model.fit(X_train, y_train)  # 모델 훈련\n","            score = model.score(X_val, y_val)  # 모델 평가\n","            scores.append(score)  # 점수 저장\n","\n","        # 평균 평가 점수 계산\n","        eval_score = sum(scores) / n_splits\n","        # 최종 모델 저장 (선택적)\n","        self.save_model(trial.trial_id, model)\n","\n","        return {\"score\": eval_score}\n","    '''\n","\n","    def save_model(self, trial_id, model, step=0):\n","        \"\"\"pickle 파일로 모델 저장\"\"\"\n","        fname = os.path.join(self.get_trial_dir(trial_id), \"model.pickle\")\n","        with tf.io.gfile.GFile(fname, \"wb\") as f:\n","            pickle.dump(model, f)\n","\n","    def load_model(self, trial):\n","        fname = os.path.join(self.get_trial_dir(trial.trial_id), \"model.pickle\")\n","        with tf.io.gfile.GFile(fname, \"rb\") as f:\n","            return pickle.load(f)"],"metadata":{"id":"eeii3Qx5uxde"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.datasets import load_digits\n","\n","# Load the hand-written digits dataset\n","digits = load_digits()\n","\n","# Get the images and corresponding labels\n","images, labels = digits.images, digits.target\n","images.shape, labels.shape\n","\n","# reshape images to vectors\n","n_samples = len(images)\n","X = images.reshape((n_samples, -1))\n","\n","# Split data into train and test subsets\n","from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split(\n","    X, labels,test_size=0.2, shuffle=False)\n","X_train, X_val, y_train, y_val = train_test_split(\n","    X_train, y_train, test_size=0.2, shuffle=False)"],"metadata":{"id":"PvYozvduwPQ_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.svm import SVC\n","from sklearn.ensemble import RandomForestClassifier\n","from keras_tuner import HyperParameters as hp\n","\n","def build_model(hp):\n","    model_type = hp.Choice(\"model_type\", [\"svm\", \"random_forest\"])\n","    if model_type == \"svm\":\n","        with hp.conditional_scope(\"model_type\", \"svm\"):\n","            model = SVC(\n","                C=hp.Float(\"C\", 1e-3, 10, sampling=\"linear\", default=1),\n","                kernel=hp.Choice(\"kernel_type\", [\"linear\", \"rbf\"], default=\"linear\"),\n","                random_state=42)\n","\n","    elif model_type == \"random_forest\":\n","        with hp.conditional_scope(\"model_type\", \"random_forest\"):\n","            model = RandomForestClassifier(\n","                n_estimators=hp.Int(\"n_estimators\", 10, 200, step=10),\n","                max_depth=hp.Int(\"max_depth\", 3, 10))\n","    else:\n","        raise ValueError(\"Unrecognized model_type\")\n","    return model\n","\n","\n","my_sklearn_tuner = ShallowTuner(\n","    oracle=kt.oracles.RandomSearchOracle(\n","        objective=kt.Objective(\"score\", \"max\"), max_trials=10, seed=42),\n","    hypermodel=build_model,\n","    overwrite=True,\n","    project_name=\"my_sklearn_tuner\")\n","\n","my_sklearn_tuner.search(X_train, y_train, validation_data=(X_val, y_val))"],"metadata":{"id":"zMpzfO9dwkCF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **사용자 정의 Keras 튜너**"],"metadata":{"id":"hZUnRC0czdtz"}},{"cell_type":"code","source":["import copy\n","import os\n","\n","import tensorflow as tf\n","import keras_tuner as kt\n","\n","class DeepTuner(kt.Tuner):\n","    def run_trial(self, trial, X, y, validation_data, **fit_kwargs):\n","        model = self.hypermodel.build(trial.hyperparameters)\n","\n","        model.fit(X,y,\n","            batch_size=trial.hyperparameters.Choice(\"batch_size\", [16, 32]),\n","            **fit_kwargs)\n","\n","        X_val, y_val = validation_data  # get the validation data\n","        eval_scores = model.evaluate(X_val, y_val)\n","        self.save_model(trial.trial_id, model)  # save the model to disk\n","        return {\n","            name: value for name, value in zip(model.metrics_names, eval_scores)\n","        }  # inform the oracle of the eval result, the result is a dictionary with the metric names as the keys.\n","\n","    def save_model(self, trial_id, model, step=0):\n","        fname = os.path.join(self.get_trial_dir(trial_id), \"model\")\n","        model.save(fname)\n","\n","    def load_model(self, trial):\n","        fname = os.path.join(self.get_trial_dir(trial.trial_id), \"model\")\n","        model = tf.keras.models.load_model(fname)\n","        return model"],"metadata":{"id":"AiC5nQpN0ksV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.datasets import load_digits\n","from sklearn.model_selection import train_test_split\n","\n","digits = load_digits()\n","\n","images, labels = digits.images, digits.target\n","images.shape, labels.shape\n","\n","n_samples = len(images)\n","X = images.reshape((n_samples, -1))\n","\n","X_train, X_test, y_train, y_test = train_test_split(\n","    X, labels, test_size=0.2, shuffle=False\n",")\n","X_train, X_val, y_train, y_val = train_test_split(\n","    X_train, y_train, test_size=0.2, shuffle=False\n",")\n"],"metadata":{"id":"vBELDhJK0m4J"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import kerastuner as kt\n","\n","def build_model(hp):\n","    model = tf.keras.Sequential()\n","    model.add(tf.keras.Input(shape=(64,)))\n","    for i in range(hp.Int(\"num_layers\", min_value=1, max_value=4)):\n","        model.add(\n","            tf.keras.layers.Dense(\n","                hp.Int(\"units_{i}\".format(i=i), min_value=32, max_value=128, step=32),\n","                activation=\"relu\",\n","            )\n","        )\n","    model.add(tf.keras.layers.Dense(10, activation=\"softmax\"))\n","    model.compile(loss=\"sparse_categorical_crossentropy\", metrics=[\"accuracy\"])\n","    return model\n","\n","random_tuner = DeepTuner(\n","    oracle=kt.oracles.RandomSearch(\n","        objective=kt.Objective(\"accuracy\", \"max\"), max_trials=10, seed=42),\n","    hypermodel=build_model,\n","    overwrite=True,\n","    project_name=\"random_tuner\")\n","'''\n","기존 사용 방법은 아래와 같으며, Tuner Class에 있는 RandomSerach말고\n","Orcacle Class에서 오라클을 직접 선택할 수 있게 됨.\n","위에서 사용했듯이 run_trial 함수를 수정해\n","훈련때 교차 검증을 사용한다던지, 전처리 로직을 포함한다던지\n","custom metrics 등을 사용할 수 있게 되는 것.\n","\n","tuner = RandomSearch(\n","    build_model,\n","    objective=\"val_mae\", #사용자 정의 지표 사용시 direction을 설정해야함.\n","    max_trials=5,\n","    executions_per_trial=3,\n","    directory=\"/content\",\n","    project_name=\"helloworld\")\n","'''\n","random_tuner.search(X_train, y_train, validation_data=(X_val, y_val), epochs=10)\n","random_tuner.search_space_summary()"],"metadata":{"id":"9pBYynxX0oXa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["'''\n","사용자 정의 메트릭을 구현하는 예시\n","\n","import keras_tuner as kt\n","from tensorflow import keras\n","\n","def compute_custom_metric(y_true, y_pred):\n","    # 여기에 사용자 정의 메트릭 계산 로직을 구현.\n","    # 예시: 정확도 계산\n","    return np.mean(y_true == y_pred)\n","\n","class CustomTuner(kt.Tuner):\n","    def run_trial(self, trial, X_train, y_train, X_test, y_test, *args, **kwargs):\n","        model = self.hypermodel.build(trial.hyperparameters)\n","        model.fit(X_train, y_train, *args, **kwargs)\n","\n","        y_pred = model.predict(X_test)\n","        custom_metric = compute_custom_metric(y_test, y_pred)\n","\n","        self.oracle.update_trial(trial.trial_id, {'custom_metric': custom_metric})\n","        self.save_model(trial.trial_id, model)\n","'''"],"metadata":{"id":"PTN5VgYS3zxW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["best_model = random_tuner.get_best_models(1)[0]\n","y_pred_test = best_model.evaluate(X_test, y_test)\n","print(best_model.metrics_names)\n","print(y_pred_test)"],"metadata":{"id":"yato7_En0p1Q"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **Sklearn + Keras**"],"metadata":{"id":"_gP5dRg21yHP"}},{"cell_type":"code","source":["from sklearn.svm import SVC\n","from sklearn.ensemble import RandomForestClassifier\n","import keras_tuner as kt\n","\n","def build_model(hp):\n","    model_type = hp.Choice(\"model_type\", [\"svm\", \"random_forest\", \"mlp\"], default=\"mlp\")\n","    if model_type == \"svm\":\n","        with hp.conditional_scope(\"model_type\", \"svm\"):\n","            model = SVC(\n","                C=hp.Float(\"C\", 1e-3, 10, sampling=\"linear\", default=1),\n","                kernel=hp.Choice(\"kernel_type\", [\"linear\", \"rbf\"], default=\"linear\"),\n","                random_state=42)\n","\n","    elif model_type == \"random_forest\":\n","        with hp.conditional_scope(\"model_type\", \"random_forest\"):\n","            model = RandomForestClassifier(\n","                n_estimators=hp.Int(\"n_estimators\", 10, 200, step=10),\n","                max_depth=hp.Int(\"max_depth\", 3, 10))\n","\n","    elif model_type == \"mlp\":\n","        with hp.conditional_scope(\"model_type\", \"mlp\"):\n","            model = tf.keras.Sequential()\n","\n","            model.add(tf.keras.Input(shape=(64,)))\n","            for i in range(hp.Int(\"num_layers\", min_value=1, max_value=4)):\n","                model.add(tf.keras.layers.Dense(\n","                    hp.Int( \"units_{i}\".format(i=i),\n","                    min_value=32,\n","                    max_value=128,\n","                    step=32),\n","                    activation=\"relu\"))\n","\n","            model.add(tf.keras.layers.Dense(10, activation=\"softmax\"))\n","            model.compile(loss=\"sparse_categorical_crossentropy\", metrics=[\"accuracy\"])\n","    else:\n","        raise ValueError(\"Unrecognized model_type\")\n","    return model"],"metadata":{"id":"0qUW28ze14jW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pickle\n","import os\n","import tensorflow as tf\n","\n","class ShallowDeepTuner(kt.Tuner):\n","    def __init__(self, *args, **kwargs):\n","        super().__init__(*args, **kwargs)\n","        self.trial_id_to_type = {}\n","\n","    def run_trial(self, trial, x, y, validation_data, epochs=None, **fit_kwargs):\n","        model = self.hypermodel.build(trial.hyperparameters)\n","        x_val, y_val = validation_data  # get the validation data\n","        if isinstance(model, tf.keras.Model):\n","            model.fit(x, y, validation_data = validation_data,\n","                batch_size=trial.hyperparameters.Choice(\"batch_size\", [16, 32]),\n","                epochs=epochs,\n","                **fit_kwargs)\n","\n","            #오라클이 서로 다른 모델에 대해서 같은 평가 유형을 수용하기 위해서\n","            #딥러닝 모델에서만 정확도를 얻음.\n","            accuracy = {name: value for name, value in zip(\n","                model.metrics_names,\n","                model.evaluate(x_val, y_val))}[\"accuracy\"]\n","\n","            self.trial_id_to_type[trial.trial_id] = \"keras\"\n","        else:\n","            model = self.hypermodel.build(trial.hyperparameters)  # build the model\n","            model.fit(x, y)\n","            accuracy = model.score(x_val, y_val)\n","            self.trial_id_to_type[trial.trial_id] = \"sklearn\"\n","        self.save_model(trial.trial_id, model)  # save the model to disk\n","        return {\"accuracy\": accuracy}\n","\n","    #케라스 모델은 save메서드로, 사이킷런 모델은 pickle 파일로 저장.\n","    def save_model(self, trial_id, model):\n","        fname = os.path.join(self.get_trial_dir(trial_id), \"model\")\n","        if isinstance(model, tf.keras.Model):\n","            model.save(fname)\n","        else:\n","            with tf.io.gfile.GFile(fname, \"wb\") as f:\n","                pickle.dump(model, f)\n","\n","    def load_model(self, trial):\n","        fname = os.path.join(self.get_trial_dir(trial.trial_id), \"model\")\n","        if self.trial_id_to_type[trial.trial_id] == \"keras\":\n","            model = tf.keras.models.load_model(fname)\n","        else:\n","            with tf.io.gfile.GFile(fname, \"rb\") as f:\n","                model = pickle.load(f)\n","        return model"],"metadata":{"id":"43mDcSOT7vIZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.datasets import load_digits\n","from sklearn.model_selection import train_test_split\n","\n","digits = load_digits()\n","\n","images, labels = digits.images, digits.target\n","images.shape, labels.shape\n","\n","n_samples = len(images)\n","X = images.reshape((n_samples, -1))\n","\n","X_train, X_test, y_train, y_test = train_test_split(\n","    X, labels, test_size=0.2, shuffle=False)\n","\n","X_train, X_val, y_train, y_val = train_test_split(\n","    X_train, y_train, test_size=0.2, shuffle=False)"],"metadata":{"id":"75uZn9Lt7yn6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["random_tuner = ShallowDeepTuner(\n","    oracle=kt.oracles.RandomSearchOracle(\n","        objective=kt.Objective(\"accuracy\", \"max\"), max_trials=30, seed=42),\n","    hypermodel=build_model,\n","    overwrite=True,\n","    project_name=\"random_tuner\")\n","\n","random_tuner.search(X_train, y_train, validation_data=(X_val, y_val), epochs=10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8g6eBuX-7z07","executionInfo":{"status":"ok","timestamp":1701259677810,"user_tz":-540,"elapsed":24997,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"18733a7c-71bd-4945-c458-d4cc0653baf2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Trial 30 Complete [00h 00m 01s]\n","accuracy: 0.9479166666666666\n","\n","Best accuracy So Far: 0.9861111111111112\n","Total elapsed time: 00h 00m 25s\n"]}]},{"cell_type":"code","source":["random_tuner.search_space_summary()\n","random_tuner.results_summary(5)"],"metadata":{"id":"RL3FSz8271Gg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["best_model = random_tuner.get_best_models(1)[0]\n","print(type(best_model))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l3SEsTmW72kJ","executionInfo":{"status":"ok","timestamp":1701259712383,"user_tz":-540,"elapsed":272,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"6839c4fb-4876-42f1-ab8b-eefe945ee77f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'sklearn.svm._classes.SVC'>\n"]}]},{"cell_type":"code","source":["# Evaluate the best discovered model\n","from sklearn.metrics import accuracy_score\n","\n","y_pred_test = best_model.predict(X_test)\n","test_acc = accuracy_score(y_test, y_pred_test)\n","print(\"The prediction accuracy on test set: {:.2f} %\".format(test_acc * 100))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OzIBe5Qi73Ci","executionInfo":{"status":"ok","timestamp":1701259713444,"user_tz":-540,"elapsed":2,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"8da8a40b-f622-48ec-b2d4-7e4c268eb8f1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The prediction accuracy on test set: 95.00 %\n"]}]},{"cell_type":"markdown","source":["## **Sklearn + Keras Ensemble**"],"metadata":{"id":"g0LyxwXp_2E_"}},{"cell_type":"code","source":["from sklearn.svm import SVC\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score\n","from tensorflow import keras\n","import numpy as np\n","import keras_tuner as kt\n","import joblib\n","import os\n","\n","def build_svm_model(hp):\n","    C = hp.Float('C', 1e-3, 1e3, sampling = 'log')\n","    gamma = hp.Float('gamma', 1e-3, 1e3, sampling = 'log')\n","    return SVC(C=C, gamma=gamma, probability=True)\n","\n","def build_rf_model(hp):\n","    n_estimators = hp.Int('rf_n_estimators', 10, 300, step=10)\n","    max_depth = hp.Int('rf_max_depth', 3, 20)\n","    return RandomForestClassifier(n_estimators=n_estimators, max_depth=max_depth)\n","\n","def build_keras_model(hp):\n","    model = keras.Sequential()\n","    model.add(keras.layers.Dense(units=hp.Int('keras_units', 16, 128, step=16), activation='relu'))\n","    model.add(keras.layers.Dense(10, activation='softmax'))\n","    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n","    return model\n","\n","class CustomEnsembleTuner(kt.Tuner):\n","    def run_trial(self, trial, X_train, y_train, validation_data, *args, **kwargs):\n","        # 모델 구축\n","        svm_model = build_svm_model(trial.hyperparameters)\n","        rf_model = build_rf_model(trial.hyperparameters)\n","        keras_model = build_keras_model(trial.hyperparameters)\n","\n","        # 모델 훈련\n","        svm_model.fit(X_train, y_train)\n","        rf_model.fit(X_train, y_train)\n","        keras_model.fit(X_train, y_train, *args, **kwargs)\n","\n","        # 예측 수행\n","        svm_preds = svm_model.predict_proba(X_val)\n","        rf_preds = rf_model.predict_proba(X_val)\n","        keras_preds = keras_model.predict(X_val)\n","\n","        # 앙상블 예측\n","        ensemble_probs = (svm_preds + rf_preds + keras_preds) / 3.0\n","        ensemble_preds = np.argmax(ensemble_probs, axis=1)\n","\n","        # 평가 점수 계산\n","        score = accuracy_score(y_val, ensemble_preds)\n","        self.oracle.update_trial(trial.trial_id, {'accuracy': score})\n","\n","        #모델 저장\n","        self.save_model(trial.trial_id, (svm_model, rf_model, keras_model))\n","\n","    def save_model(self, trial_id, model, directory='./models'):\n","        os.makedirs(directory, exist_ok=True)\n","        svm_model, rf_model, keras_model = model\n","        joblib.dump(svm_model, os.path.join(directory, f'svm_model_{trial_id}.pkl'))\n","        joblib.dump(rf_model, os.path.join(directory, f'rf_model_{trial_id}.pkl'))\n","        keras_model.save(os.path.join(directory, f'keras_model_{trial_id}'))\n","\n","    def load_model(self, trial_id, directory='./models'):\n","        svm_model = joblib.load(os.path.join(directory, f'svm_model_{trial_id}.pkl'))\n","        rf_model = joblib.load(os.path.join(directory, f'rf_model_{trial_id}.pkl'))\n","        keras_model = keras.models.load_model(os.path.join(directory, f'keras_model_{trial_id}'))\n","        return svm_model, rf_model, keras_model\n","\n","    # 앙상블 모델을 불러오기 위한 함수\n","    def get_best_models(self, num_models=1):\n","        best_models = []\n","        best_trials = self.oracle.get_best_trials(num_models)\n","\n","        for trial in best_trials:\n","            # 각 컴포넌트 모델 로드\n","            svm_model, rf_model, keras_model = self.load_model(trial.trial_id)\n","            best_models.append((svm_model, rf_model, keras_model))\n","\n","        return best_models"],"metadata":{"id":"4GGU8FDZ_4lF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.datasets import load_digits\n","from sklearn.model_selection import train_test_split\n","\n","#데이터 생성\n","digits = load_digits()\n","\n","images, labels = digits.images, digits.target\n","images.shape, labels.shape\n","\n","n_samples = len(images)\n","X = images.reshape((n_samples, -1))\n","\n","X_train, X_test, y_train, y_test = train_test_split(\n","    X, labels, test_size=0.2, shuffle=False)\n","\n","X_train, X_val, y_train, y_val = train_test_split(\n","    X_train, y_train, test_size=0.2, shuffle=False)"],"metadata":{"id":"XwGZzZYnCdy9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import keras_tuner as kt\n","\n","def build_model(hp):\n","    svm_model = build_svm_model(hp)\n","    rf_model = build_rf_model(hp)\n","    keras_model = build_keras_model(hp)\n","    return [svm_model, rf_model, keras_model]\n","\n","random_tuner = CustomEnsembleTuner(\n","    oracle = kt.oracles.HyperbandOracle(\n","        objective=kt.Objective(\"accuracy\", \"max\"),\n","        max_epochs = 50,\n","        seed = 42),\n","    hypermodel = build_model,  # 하이퍼모델 함수 지정\n","    overwrite = True,\n","    project_name = \"random_tuner\")\n","\n","random_tuner.search(X_train, y_train, validation_data=(X_val, y_val), epochs=10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tYPDLQuHBkhP","executionInfo":{"status":"ok","timestamp":1701264398751,"user_tz":-540,"elapsed":404099,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"da447eac-8804-4e69-a839-b83f38addf96"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Trial 90 Complete [00h 00m 04s]\n","accuracy: 0.9548611111111112\n","\n","Best accuracy So Far: 0.9826388888888888\n","Total elapsed time: 00h 06m 44s\n"]}]},{"cell_type":"code","source":["#최상의 시도에 대한 평가 정보와 하이퍼파라미터\n","random_tuner.results_summary(1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dG-yOOdwP8O6","executionInfo":{"status":"ok","timestamp":1701264403243,"user_tz":-540,"elapsed":249,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"e8932fb8-37ac-4fde-8086-09cdb25af296"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Results summary\n","Results in ./random_tuner\n","Showing 1 best trials\n","Objective(name=\"accuracy\", direction=\"max\")\n","\n","Trial 0036 summary\n","Hyperparameters:\n","C: 0.7717556265737\n","gamma: 0.001525217996931403\n","rf_n_estimators: 80\n","rf_max_depth: 19\n","keras_units: 112\n","tuner/epochs: 6\n","tuner/initial_epoch: 2\n","tuner/bracket: 3\n","tuner/round: 1\n","tuner/trial_id: 0014\n","Score: 0.9826388888888888\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score\n","\n","# 최상의 모델 불러오기\n","best_models = random_tuner.get_best_models(num_models=1)[0]\n","svm_model, rf_model, keras_model = best_models\n","\n","def ensemble_predict(svm_model, rf_model, keras_model, X):\n","    # 각 모델의 예측값 계산\n","    svm_preds = svm_model.predict_proba(X_test)\n","    rf_preds = rf_model.predict_proba(X_test)\n","    keras_preds = keras_model.predict(X_test)\n","\n","    # 앙상블 예측\n","    ensemble_probs = (svm_preds + rf_preds + keras_preds) / 3.0\n","    ensemble_preds = np.argmax(ensemble_probs, axis=1)\n","    return ensemble_preds\n","\n","# 테스트 데이터셋에 대한 예측 수행\n","ensemble_predictions = ensemble_predict(svm_model, rf_model, keras_model, X_test)\n","\n","# 모델 평가 (예: 정확도 계산)\n","test_accuracy = accuracy_score(y_test, ensemble_predictions)\n","print(\"Test Accuracy:\", test_accuracy)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cJab30uWFOYv","executionInfo":{"status":"ok","timestamp":1701264411671,"user_tz":-540,"elapsed":688,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"b92152f7-bb92-4249-dcf1-4f155cbf58be"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["12/12 [==============================] - 0s 2ms/step\n","Test Accuracy: 0.9277777777777778\n"]}]},{"cell_type":"code","source":["'''\n","# 교차 검증 모델\n","from sklearn.model_selection import KFold\n","from sklearn.metrics import accuracy_score\n","import numpy as np\n","\n","class CustomEnsembleTuner(kt.Tuner):\n","    def run_trial(self, trial, X, y, *args, **kwargs):\n","        n_splits = 5  # K-폴드 교차 검증에서의 분할 수\n","        kf = KFold(n_splits=n_splits)\n","\n","        val_scores = []\n","\n","        for train_index, val_index in kf.split(X):\n","            X_train, X_val = X[train_index], X[val_index]\n","            y_train, y_val = y[train_index], y[val_index]\n","\n","            # 각 모델 구축\n","            svm_model = build_svm_model(trial.hyperparameters)\n","            rf_model = build_rf_model(trial.hyperparameters)\n","            keras_model = build_keras_model(trial.hyperparameters)\n","\n","            # 각 모델 훈련\n","            svm_model.fit(X_train, y_train)\n","            rf_model.fit(X_train, y_train)\n","            keras_model.fit(X_train, y_train, *args, **kwargs)\n","\n","            # 앙상블 예측\n","            svm_preds = svm_model.predict_proba(X_val)[:, 1]\n","            rf_preds = rf_model.predict_proba(X_val)[:, 1]\n","            keras_preds = keras_model.predict(X_val).flatten()\n","            ensemble_preds = (svm_preds + rf_preds + keras_preds) / 3\n","\n","            # 평가 점수 계산\n","            score = accuracy_score(y_val, ensemble_preds >= 0.5)\n","            val_scores.append(score)\n","\n","        # 평균 점수 계산\n","        avg_score = np.mean(val_scores)\n","        self.oracle.update_trial(trial.trial_id, {'val_accuracy': avg_score})\n","'''"],"metadata":{"id":"yWuzwvsqBKPv"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **LightGBM Regressor with california_housing**"],"metadata":{"id":"lolSfc_n-34b"}},{"cell_type":"code","source":["'''\n","sklearn이나 keras 모델말고 lightgbm 같은 모델을 훈련할때는 튜너를\n","어떻게 구성해야 할까? 이것도 크게 다르지 않다.\n","'''\n","import pandas as pd\n","from sklearn.datasets import fetch_california_housing\n","from sklearn.model_selection import train_test_split\n","\n","house_dataset = fetch_california_housing()\n","data = pd.DataFrame(house_dataset.data, columns=house_dataset.feature_names)\n","target = pd.Series(house_dataset.target, name=\"MEDV\")\n","\n","X_train, X_test, y_train, y_test = train_test_split(\n","    data, target, test_size=0.2, random_state=42)\n","X_train, X_val, y_train, y_val = train_test_split(\n","    X_train, y_train, test_size=0.2, shuffle=False)"],"metadata":{"id":"zcpXTWen-69y"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["```\n","LGBM 홈페이지에서 추천하는 하이퍼파라미터 튜닝\n","num_leaves : 2^depth보다 작게 예를들어 depth가 7이면 2^7 = 128이면 70~80으로,\n","min_data_in_leaf : 대규모에서도 수백,수천으로 충분하고 샘플 수와 num_leaves에 따라 달라짐\n","For Better Accuracy\n","Use large max_bin (may be slower)\n","Use small learning_rate with large num_iterations\n","Use large num_leaves (may cause over-fitting)\n","Use bigger training data\n","Try dart\n","\n","Deal with Over-fitting\n","Use small max_bin\n","Use small num_leaves\n","Use min_data_in_leaf and min_sum_hessian_in_leaf\n","Use bagging by set bagging_fraction and bagging_freq\n","Use feature sub-sampling by set feature_fraction\n","Use bigger training data\n","Try lambda_l1, lambda_l2 and min_gain_to_split for regularization\n","Try max_depth to avoid growing deep tree\n","Try extra_trees\n","Try increasing path_smooth\n","```"],"metadata":{"id":"jPSWleLYUd59"}},{"cell_type":"code","source":["import os\n","import pickle\n","import tensorflow as tf\n","import keras_tuner as kt\n","import lightgbm as lgb\n","from sklearn.metrics import mean_squared_error\n","\n","def build_model(hp):\n","    model = lgb.LGBMRegressor(\n","        boosting_type=\"gbdt\",\n","        num_leaves=hp.Choice(\"num_leaves\", [15, 31, 63], default=31),\n","        learning_rate=hp.Float(\"learning_rate\", 1e-3, 10, sampling=\"log\", default=0.05),\n","        n_estimators=hp.Int(\"n_estimators\", 10, 200, step=10),)\n","    return model\n","\n","class LightGBMTuner(kt.Tuner):\n","    def run_trial(self, trial, X, y, validation_data):\n","        model = self.hypermodel.build(trial.hyperparameters)\n","        model.fit(X_train, y_train,\n","                  eval_set=[validation_data],\n","                  eval_metric=\"mse\")\n","        X_val, y_val = validation_data\n","        y_pred = model.predict(\n","            X_val, num_iteration=model.best_iteration_\n","        )  # evaluate the model\n","        eval_mse = mean_squared_error(y_val, y_pred)\n","        self.save_model(trial.trial_id, model)\n","        return {\"mse\": eval_mse}\n","\n","    def save_model(self, trial_id, model, step=0):\n","        fname = os.path.join(self.get_trial_dir(trial_id), \"model.txt\")\n","        model.booster_.save_model(fname, num_iteration=model.best_iteration_)\n","\n","    def load_model(self, trial):\n","        fname = os.path.join(self.get_trial_dir(trial.trial_id), \"model.txt\")\n","        model = lgb.Booster(model_file=fname)\n","        return model"],"metadata":{"id":"Extskx-TPvJQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["my_lightgbm_tuner = LightGBMTuner(\n","    oracle=kt.oracles.RandomSearchOracle(\n","        objective=kt.Objective(\"mse\", \"min\"), max_trials=30, seed=42),\n","    hypermodel=build_model,\n","    overwrite=True,\n","    project_name=\"my_lightgbm_tuner\")\n","\n","my_lightgbm_tuner.search(X_train, y_train, validation_data=(X_val, y_val))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5Kke1gk7QYwQ","executionInfo":{"status":"ok","timestamp":1701264608487,"user_tz":-540,"elapsed":10836,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"22d0a1d5-16b2-4aab-f2a0-17824e00ca6b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Trial 30 Complete [00h 00m 00s]\n","mse: 0.2354704616814661\n","\n","Best mse So Far: 0.21464431132198714\n","Total elapsed time: 00h 00m 11s\n"]}]},{"cell_type":"code","source":["my_lightgbm_tuner.results_summary(1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HjOpmpOdQeH3","executionInfo":{"status":"ok","timestamp":1701264611461,"user_tz":-540,"elapsed":296,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"7938c460-e340-4040-acb0-c7fdac8c120a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Results summary\n","Results in ./my_lightgbm_tuner\n","Showing 1 best trials\n","Objective(name=\"mse\", direction=\"min\")\n","\n","Trial 17 summary\n","Hyperparameters:\n","num_leaves: 63\n","learning_rate: 0.15388851689565533\n","n_estimators: 160\n","Score: 0.21464431132198714\n"]}]},{"cell_type":"code","source":["best_model = my_lightgbm_tuner.get_best_models(1)[0]\n","y_pred_test = best_model.predict(X_test)\n","test_mse = mean_squared_error(y_test, y_pred_test)\n","print(\"The prediction MSE on test set: {}\".format(test_mse))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TrVLmXRvQb10","executionInfo":{"status":"ok","timestamp":1701264613077,"user_tz":-540,"elapsed":322,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"ee5841a2-4a97-489d-c7c8-d784050a5151"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The prediction MSE on test set: 0.20921098098501498\n"]}]}]}