{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPDD528KycxGJrUt3Ls1zNv"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Rq4YQdfXHpKi","executionInfo":{"status":"ok","timestamp":1699572696552,"user_tz":-540,"elapsed":2367,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"5231983d-9034-4dc6-ea0c-3a4dd5dc62ca"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 150 entries, 0 to 149\n","Data columns (total 4 columns):\n"," #   Column             Non-Null Count  Dtype  \n","---  ------             --------------  -----  \n"," 0   sepal length (cm)  150 non-null    float64\n"," 1   sepal width (cm)   150 non-null    float64\n"," 2   petal length (cm)  150 non-null    float64\n"," 3   petal width (cm)   150 non-null    float64\n","dtypes: float64(4)\n","memory usage: 4.8 KB\n"]},{"output_type":"execute_result","data":{"text/plain":["array(['setosa', 'versicolor', 'virginica'], dtype='<U10')"]},"metadata":{},"execution_count":1}],"source":["from sklearn.datasets import load_iris\n","iris = load_iris(as_frame = True)\n","iris.data.info()\n","iris.target_names"]},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import train_test_split\n","\n","X = iris.data[[\"petal length (cm)\", \"petal width (cm)\", \"sepal length (cm)\",\n","               \"sepal width (cm)\"]].values\n","#y = iris.target_names[iris.target] == 'virginica'\n","y = iris[\"target\"]\n","X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)\n","\n","logb_reg = LogisticRegression(C = 2, random_state=42,solver = 'newton-cg')\n","logb_reg.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"9mBSillPPSC-","executionInfo":{"status":"ok","timestamp":1699573489723,"user_tz":-540,"elapsed":324,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"b4879653-7d3d-413a-ab2b-249c4c95b5a5"},"execution_count":60,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(C=2, random_state=42, solver='newton-cg')"],"text/html":["<style>#sk-container-id-19 {color: black;background-color: white;}#sk-container-id-19 pre{padding: 0;}#sk-container-id-19 div.sk-toggleable {background-color: white;}#sk-container-id-19 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-19 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-19 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-19 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-19 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-19 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-19 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-19 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-19 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-19 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-19 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-19 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-19 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-19 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-19 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-19 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-19 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-19 div.sk-item {position: relative;z-index: 1;}#sk-container-id-19 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-19 div.sk-item::before, #sk-container-id-19 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-19 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-19 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-19 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-19 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-19 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-19 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-19 div.sk-label-container {text-align: center;}#sk-container-id-19 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-19 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-19\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(C=2, random_state=42, solver=&#x27;newton-cg&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" checked><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(C=2, random_state=42, solver=&#x27;newton-cg&#x27;)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":60}]},{"cell_type":"code","source":["logb_reg.predict_proba([[5.0,2.1,11,0.2]]).round(2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zGQk-UiNTlyw","executionInfo":{"status":"ok","timestamp":1699573491397,"user_tz":-540,"elapsed":1,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"94695f18-941b-4e3f-fc39-5a6ed9a88b24"},"execution_count":61,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.  , 0.64, 0.36]])"]},"metadata":{},"execution_count":61}]},{"cell_type":"code","source":["\"\"\" sklearn없이 넘파이만으로 분류 구현\"\"\"\n","import numpy as np\n","\n","X = iris.data[[\"petal length (cm)\", \"petal width (cm)\"]].values\n","y = iris[\"target\"].values\n","\n","X_with_bias = np.c_[np.ones(len(X)), X] # add_dummy_feature()"],"metadata":{"id":"OpDAFVsamKCn","executionInfo":{"status":"ok","timestamp":1699575627255,"user_tz":-540,"elapsed":365,"user":{"displayName":"김태식","userId":"11264777984025639378"}}},"execution_count":62,"outputs":[]},{"cell_type":"code","source":["# train_test_split\n","\n","test_ratio = 0.2\n","validation_ratio = 0.2\n","total_size = len(X_with_bias)\n","\n","test_size = int(total_size * test_ratio)\n","validation_size = int(total_size * validation_ratio)\n","train_size = total_size - test_size - validation_size\n","\n","np.random.seed(42)\n","rnd_indices = np.random.permutation(total_size) # 순서 섞기\n","\n","X_train = X_with_bias[rnd_indices[:train_size]]\n","y_train = y[rnd_indices[:train_size]]\n","X_valid = X_with_bias[rnd_indices[train_size : - test_size]]\n","y_valid = y[rnd_indices[train_size : - test_size]]\n","X_test = X_with_bias[rnd_indices[-test_size:]]\n","y_test = y[rnd_indices[-test_size:]]"],"metadata":{"id":"0F7TrHrUmvyT","executionInfo":{"status":"ok","timestamp":1699575997939,"user_tz":-540,"elapsed":301,"user":{"displayName":"김태식","userId":"11264777984025639378"}}},"execution_count":64,"outputs":[]},{"cell_type":"code","source":["def to_one_hot(y):\n","    return np.diag(np.ones(y.max() + 1))[y] #실제 target y를 원핫벡터로 변환\n","\n","Y_train_one_hot = to_one_hot(y_train)\n","Y_vaild_one_hot = to_one_hot(y_valid)\n","Y_test_one_hot = to_one_hot(y_test)"],"metadata":{"id":"CF8wJiLpn7GT","executionInfo":{"status":"ok","timestamp":1699576915697,"user_tz":-540,"elapsed":1,"user":{"displayName":"김태식","userId":"11264777984025639378"}}},"execution_count":73,"outputs":[]},{"cell_type":"code","source":["mean = X_train[:, 1:].mean(axis = 0) # bias는 제외\n","std = X_train[:, 1:].std(axis = 0)\n","X_train[:, 1:] = (X_train[:, 1:] - mean) / std # 분산을 1로 만드는 정규화\n","X_valid[:, 1:] = (X_valid[:, 1:] - mean) / std\n","X_test[:, 1:] = (X_test[:, 1:] - mean) / std"],"metadata":{"id":"c8ofY4lioUsk","executionInfo":{"status":"ok","timestamp":1699576461406,"user_tz":-540,"elapsed":2,"user":{"displayName":"김태식","userId":"11264777984025639378"}}},"execution_count":71,"outputs":[]},{"cell_type":"code","source":["def softmax(logits):\n","    exps = np.exp(logits)\n","    exp_sums = exps.sum(axis = 1, keepdims = True)\n","    return exps / exp_sums"],"metadata":{"id":"QWMFR2HIo1_N","executionInfo":{"status":"ok","timestamp":1699576999163,"user_tz":-540,"elapsed":2,"user":{"displayName":"김태식","userId":"11264777984025639378"}}},"execution_count":76,"outputs":[]},{"cell_type":"code","source":["n_inputs = X_train.shape[1]  # == 3 (2개의 특성과 편향)\n","n_outputs = len(np.unique(y_train))  # == 3 (3개의 붓꽃 클래스)"],"metadata":{"id":"2TbbkozPpW9L","executionInfo":{"status":"ok","timestamp":1699576378974,"user_tz":-540,"elapsed":1,"user":{"displayName":"김태식","userId":"11264777984025639378"}}},"execution_count":69,"outputs":[]},{"cell_type":"code","source":["eta = 0.5 # 학습률\n","n_epochs = 5001\n","m = len(X_train) # 샘플 개수\n","epsilon = 1e-5 # 그레이디언트 계산 함수가 0이 되지 않도록 작은 값 추가\n","\n","np.random.seed(42)\n","Theta = np.random.randn(n_inputs, n_outputs) # 초기 시작 위치\n","\n","for epoch in range(n_epochs):\n","    logits = X_train @ Theta\n","    Y_proba = softmax(logits)\n","    if epoch % 1000 == 0: # 중간마다 그레이디언트 출력\n","        Y_proba_vaild = softmax(X_valid @ Theta) # 검증값\n","        xentropy_losses = -(Y_vaild_one_hot * np.log(Y_proba_vaild + epsilon))\n","        print(epoch,xentropy_losses.sum(axis = 1).mean())\n","    error = Y_proba - Y_train_one_hot\n","    gradients = 1 / m * X_train.T @ error\n","    Theta = Theta - eta * gradients\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"of5ZHyFopyb-","executionInfo":{"status":"ok","timestamp":1699577522489,"user_tz":-540,"elapsed":539,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"65b24bd5-1c7e-438d-d716-f5626955b913"},"execution_count":94,"outputs":[{"output_type":"stream","name":"stdout","text":["0 3.7085808486476917\n","1000 0.1451936748083065\n","2000 0.13013095755040877\n","3000 0.12009639326384533\n","4000 0.11372961364786884\n","5000 0.11002459532472425\n"]}]},{"cell_type":"code","source":["logits = X_valid @ Theta\n","Y_proba = softmax(logits)\n","y_predict = Y_proba.argmax(axis=1)\n","\n","accuracy_score = (y_predict == y_valid).mean()\n","accuracy_score"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"__LFMF5wt9Aj","executionInfo":{"status":"ok","timestamp":1699577584238,"user_tz":-540,"elapsed":2,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"9dc2723d-ae1f-4d8f-a234-dc0c499dc0ec"},"execution_count":104,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8"]},"metadata":{},"execution_count":104}]},{"cell_type":"code","source":["eta = 0.5\n","n_epochs = 5001\n","m = len(X_train)\n","epsilon = 1e-5\n","alpha = 0.01  # 규제 하이퍼파라미터\n","\n","np.random.seed(42)\n","Theta = np.random.randn(n_inputs, n_outputs)\n","\n","for epoch in range(n_epochs):\n","    logits = X_train @ Theta\n","    Y_proba = softmax(logits)\n","    if epoch % 1000 == 0:\n","        Y_proba_valid = softmax(X_valid @ Theta)\n","        xentropy_losses = -(Y_valid_one_hot * np.log(Y_proba_valid + epsilon))\n","        l2_loss = 1 / 2 * (Theta[1:] ** 2).sum()\n","        total_loss = xentropy_losses.sum(axis=1).mean() + alpha * l2_loss\n","        print(epoch, total_loss.round(4))\n","    error = Y_proba - Y_train_one_hot\n","    gradients = 1 / m * X_train.T @ error\n","    gradients += np.r_[np.zeros([1, n_outputs]), alpha * Theta[1:]]\n","    Theta = Theta - eta * gradients"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_lw-Qxlht_xw","executionInfo":{"status":"ok","timestamp":1699577658226,"user_tz":-540,"elapsed":768,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"bd9fc622-63b5-4c8a-aa6c-acf3b306c972"},"execution_count":117,"outputs":[{"output_type":"stream","name":"stdout","text":["0 3.7372\n","1000 0.3259\n","2000 0.3259\n","3000 0.3259\n","4000 0.3259\n","5000 0.3259\n"]}]},{"cell_type":"code","source":["logits = X_valid @ Theta\n","Y_proba = softmax(logits)\n","y_predict = Y_proba.argmax(axis=1)\n","\n","accuracy_score = (y_predict == y_valid).mean()\n","accuracy_score"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-pzl8JQ8uADj","executionInfo":{"status":"ok","timestamp":1699577658226,"user_tz":-540,"elapsed":2,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"02dd1d16-6ebf-4e19-ee21-396c02baf550"},"execution_count":118,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9333333333333333"]},"metadata":{},"execution_count":118}]}]}