{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["itG2gotxLS8V"],"gpuType":"T4","authorship_tag":"ABX9TyOfAPOxgUcFbEaODfDGz9dJ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# **기본 설정**"],"metadata":{"id":"itG2gotxLS8V"}},{"cell_type":"code","source":["import matplotlib.animation\n","import matplotlib.pyplot as plt\n","\n","plt.rc('font', size=14)\n","plt.rc('axes', labelsize=14, titlesize=14)\n","plt.rc('legend', fontsize=14)\n","plt.rc('xtick', labelsize=10)\n","plt.rc('ytick', labelsize=10)\n","plt.rc('animation', html='jshtml')\n","\n","import sys\n","# 코랩의 경우 나눔 폰트를 설치합니다.\n","if 'google.colab' in sys.modules:\n","    !sudo apt-get -qq -y install fonts-nanum\n","    import matplotlib.font_manager as fm\n","    font_files = fm.findSystemFonts(fontpaths=['/usr/share/fonts/truetype/nanum'])\n","    for fpath in font_files:\n","        fm.fontManager.addfont(fpath)\n","\n","# 나눔 폰트를 사용합니다.\n","import matplotlib\n","\n","matplotlib.rc('font', family='NanumBarunGothic')\n","matplotlib.rcParams['axes.unicode_minus'] = False"],"metadata":{"id":"DLIphSg_K_j3","executionInfo":{"status":"ok","timestamp":1700463041269,"user_tz":-540,"elapsed":2038,"user":{"displayName":"김태식","userId":"11264777984025639378"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["from pathlib import Path\n","\n","IMAGES_PATH = Path() / \"images\" / \"rl\"\n","IMAGES_PATH.mkdir(parents=True, exist_ok=True)\n","\n","def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n","    path = IMAGES_PATH / f\"{fig_id}.{fig_extension}\"\n","    if tight_layout:\n","        plt.tight_layout()\n","    plt.savefig(path, format=fig_extension, dpi=resolution)"],"metadata":{"id":"tLl49GDqLBDJ","executionInfo":{"status":"ok","timestamp":1700463041270,"user_tz":-540,"elapsed":2,"user":{"displayName":"김태식","userId":"11264777984025639378"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","execution_count":21,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JV7WBqGFFiuJ","executionInfo":{"status":"ok","timestamp":1700463066312,"user_tz":-540,"elapsed":25044,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"d0b8c9d4-9c7c-4bbb-c94b-8ba042f748fe"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: swig in /usr/local/lib/python3.10/dist-packages (4.1.1.post0)\n"]}],"source":["%pip install -q -U gymnasium\n","%pip install swig\n","%pip install -q -U gymnasium[classic_control,box2d,atari,accept-rom-license]"]},{"cell_type":"markdown","source":["# **OpenAI Gym**"],"metadata":{"id":"HVV-1x5YLPZp"}},{"cell_type":"code","source":["import gymnasium as gym\n","\n","env = gym.make(\"CartPole-v1\", render_mode = \"rgb_array\")\n","#pip install --upgrade ipython jupyter 경고 메세지 제거"],"metadata":{"id":"K3cLfP4ZLit1","executionInfo":{"status":"ok","timestamp":1700453746492,"user_tz":-540,"elapsed":924,"user":{"displayName":"김태식","userId":"11264777984025639378"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["obs, info = env.reset(seed=42) # 환경을 만들면 반드시 리셋해야함."],"metadata":{"id":"T3cq9E5wkIzO","executionInfo":{"status":"ok","timestamp":1700454681138,"user_tz":-540,"elapsed":1,"user":{"displayName":"김태식","userId":"11264777984025639378"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["img = env.render() #이미지로 렌더링 할 수 있다.\n","img.shape"],"metadata":{"id":"EZ-rn1fekOKn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700454682785,"user_tz":-540,"elapsed":483,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"b953dbd7-1e28-4455-a591-fe8ea7a585c0"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(400, 600, 3)"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["def plot_environment(env, figsize=(5, 4)):\n","    plt.figure(figsize=figsize)\n","    img = env.render()\n","    plt.imshow(img)\n","    plt.axis(\"off\")\n","    return img\n","\n","plot_environment(env)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"HzYkKuQFk1xa","executionInfo":{"status":"ok","timestamp":1700454683073,"user_tz":-540,"elapsed":3,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"621255e4-4d0c-4439-fa18-4b5019349758"},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["action = 1 #왼쪽0 오른쪽 1\n","# 새로운 관측값, 리워드, 에피소드(게임 한 판)진행중 여부, 조기 중단 여부\n","# 게임이 끝나면 close() 메서드로 자원을 반납하고 다시 reset()한 뒤 시작해야한다.\n","obs, reward, done, truncated, info = env.step(action)"],"metadata":{"id":"3u1w2QLQk44a","executionInfo":{"status":"ok","timestamp":1700454684874,"user_tz":-540,"elapsed":2,"user":{"displayName":"김태식","userId":"11264777984025639378"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["#막대가 왼쪽으로 기울어지면 카트를 왼쪽으로 밀고, 반대는 오른쪽으로 미는 간단한 정책\n","def basic_policy(obs):\n","    angle = obs[2]\n","    return 0 if angle < 0 else 1\n","\n","totals = []\n","for episode in range(500):\n","    episode_rewards = 0\n","    obs, info = env.reset(seed=episode) # 매 판 리셋한다\n","    for step in range(200):\n","        action = basic_policy(obs)\n","        obs, reward, done, truncated, info = env.step(action)\n","        episode_rewards += reward\n","        if done or truncated:\n","            break\n","\n","    totals.append(episode_rewards)"],"metadata":{"id":"afdL6zDemKnL","executionInfo":{"status":"ok","timestamp":1700454686554,"user_tz":-540,"elapsed":429,"user":{"displayName":"김태식","userId":"11264777984025639378"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","\n","np.mean(totals), np.std(totals), min(totals), max(totals)\n","# (41.698, 8.389445512070509, 24.0, 63.0)\n","# 최대 63번 이상 진행하지 못한다."],"metadata":{"id":"yFJjNlzbmQtk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700454689049,"user_tz":-540,"elapsed":1,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"f2445d9c-b612-4680-8f10-cfda54daabba"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(41.698, 8.389445512070509, 24.0, 63.0)"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["#한 에피소드의 애니메이션을 표시.\n","\n","def update_scene(num, frames, patch):\n","    patch.set_data(frames[num])\n","    return patch,\n","\n","def plot_animation(frames, repeat=False, interval=40):\n","    fig = plt.figure()\n","    patch = plt.imshow(frames[0])\n","    plt.axis('off')\n","    anim = matplotlib.animation.FuncAnimation(\n","        fig, update_scene, fargs=(frames, patch),\n","        frames=len(frames), repeat=repeat, interval=interval)\n","    plt.close()\n","    return anim\n","\n","def show_one_episode(policy, n_max_steps=200, seed=42):\n","    frames = []\n","    env = gym.make(\"CartPole-v1\", render_mode=\"rgb_array\")\n","    np.random.seed(seed)\n","    obs, info = env.reset(seed=seed)\n","    for step in range(n_max_steps):\n","        frames.append(env.render())\n","        action = policy(obs)\n","        obs, reward, done, truncated, info = env.step(action)\n","        if done or truncated:\n","            break\n","    env.close()\n","    return plot_animation(frames)\n","\n","show_one_episode(basic_policy)"],"metadata":{"id":"Wqt0-BYYmXjv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import tensorflow as tf\n","\n","#신경망으로 모델을 훈련할 수 있다.\n","tf.random.set_seed(42)\n","\n","model = tf.keras.Sequential([\n","    tf.keras.layers.Dense(5, activation=\"relu\"),\n","    tf.keras.layers.Dense(1, activation=\"sigmoid\"), #왼쪽 아님 오른쪽이라 sigmoid\n","])"],"metadata":{"id":"rIu1qfrVoF9d"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def play_one_step(env, obs, model, loss_fn):\n","    with tf.GradientTape() as tape:\n","        left_proba = model(obs[np.newaxis])\n","        action = (tf.random.uniform([1, 1]) > left_proba) #False or True\n","        #left_proba가 크면 action = False(0)가 되고 1 - 0 = 1 이므로 왼쪽으로 이동함.\n","        y_target = tf.constant([[1.]]) - tf.cast(action, tf.float32)\n","        loss = tf.reduce_mean(loss_fn(y_target, left_proba))\n","\n","    grads = tape.gradient(loss, model.trainable_variables)\n","    obs, reward, done, truncated, info = env.step(int(action))\n","    return obs, reward, done, truncated, grads"],"metadata":{"id":"Ujcqbz0UoX2x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def play_multiple_episodes(env, n_episodes, n_max_steps, model, loss_fn):\n","    all_rewards = []\n","    all_grads = []\n","    for episode in range(n_episodes):\n","        current_rewards = []\n","        current_grads = []\n","        obs, info = env.reset()\n","        for step in range(n_max_steps):\n","            obs, raward, done, truncated, grads = play_one_step(\n","                env, obs, model, loss_fn)\n","            current_rewards.append(reward)\n","            current_grads.append(grads)\n","            if done or truncated:\n","                break\n","\n","        all_rewards.append(current_rewards)\n","        all_grads.append(current_grads)\n","\n","    return all_rewards, all_grads\n","\n","#할인계수 적용, 초반에 많은 점수를 주고, 후반에 적은 점수를 준다.\n","def discount_rewards(rewards, discount_factor):\n","    discounted = np.array(rewards)\n","    for step in range(len(rewards) - 2, -1, -1):\n","        discounted[step] += discounted[step + 1] * discount_factor\n","    return discounted\n","\n","#그리고 여러 에피소드에 걸쳐 계산된 모든 보상에서 평균을빼고 표준편차로 나눠 정규화 한다.\n","#정규화했을때 음수가 나온 에피소드는 나쁜행동, 양수는 좋은 행동을 한 것.\n","def discount_and_normalize_rewards(all_rewards, discount_factor):\n","    all_discounted_rewards = [discount_rewards(rewards, discount_factor)\n","                              for rewards in all_rewards]\n","    flat_rewards = np.concatenate(all_discounted_rewards)\n","    reward_mean = flat_rewards.mean()\n","    reward_std = flat_rewards.std()\n","    return [(discounted_rewards - reward_mean) / reward_std\n","            for discounted_rewards in all_discounted_rewards]"],"metadata":{"id":"8J6LkPT9poNf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 반복 횟수, 에포크 횟수, 할인계수 등을 설정하고..\n","n_iterations = 75\n","n_episodes_per_update = 5\n","n_max_steps = 200\n","discount_factor = 0.95 #전형적인 범위는 0.9 ~ 0.99"],"metadata":{"id":"MvGN-kJ1rYJA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tf.random.set_seed(42)\n","\n","#모델을 만들고..\n","model = tf.keras.Sequential([\n","    tf.keras.layers.Dense(5, activation=\"relu\"),\n","    tf.keras.layers.Dense(1, activation=\"sigmoid\"),\n","])\n","\n","obs, info = env.reset(seed=42)\n","\n","optimizer = tf.keras.optimizers.Nadam(learning_rate=0.01) #옵티마이저는 adam이 무난.\n","loss_fn = tf.keras.losses.binary_crossentropy #왼쪽 or 오른쪽 이므로."],"metadata":{"id":"pevcBOPerih4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#훈련한다.\n","for iteration in range(n_iterations):\n","    all_rewards, all_grads = play_multiple_episodes(\n","        env, n_episodes_per_update, n_max_steps, model, loss_fn)\n","\n","    #훈련 중 일부 디버그 정보를 표시.\n","    total_rewards = sum(map(sum, all_rewards))\n","    print(f\"\\r반복: {iteration + 1}/{n_iterations},\"\n","          f\" 평균 보상: {total_rewards / n_episodes_per_update:.1f}\", end=\"\")\n","\n","    all_final_rewards = discount_and_normalize_rewards(all_rewards,\n","                                                       discount_factor)\n","    all_mean_grads = []\n","    for var_index in range(len(model.trainable_variables)):\n","        mean_grads = tf.reduce_mean(\n","            [final_reward * all_grads[episode_index][step][var_index]\n","             for episode_index, final_rewards in enumerate(all_final_rewards)\n","                 for step, final_reward in enumerate(final_rewards)], axis=0)\n","        all_mean_grads.append(mean_grads)\n","\n","    optimizer.apply_gradients(zip(all_mean_grads, model.trainable_variables))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RExPm9L1rsu7","executionInfo":{"status":"ok","timestamp":1700382548352,"user_tz":-540,"elapsed":223797,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"0fcdfc65-d6b4-4b92-efc9-3f36b0a18106"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["반복: 75/75, 평균 보상: 164.8"]}]},{"cell_type":"markdown","source":["# **연습 문제**"],"metadata":{"id":"h39H4VD3fo5f"}},{"cell_type":"code","source":["import gymnasium as gym\n","\n","env = gym.make(\"LunarLander-v2\", render_mode = \"rgb_array\")"],"metadata":{"id":"MTWoUDvsfqWm","executionInfo":{"status":"ok","timestamp":1700463105076,"user_tz":-540,"elapsed":370,"user":{"displayName":"김태식","userId":"11264777984025639378"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["import tensorflow as tf\n","import numpy as np\n","\n","np.random.seed(42)\n","tf.random.set_seed(42)\n","\n","n_inputs = env.observation_space.shape[0]\n","n_outputs = env.action_space.n\n","\n","model = tf.keras.Sequential([\n","    tf.keras.layers.Dense(32, activation=\"relu\", input_shape=[n_inputs]),\n","    tf.keras.layers.Dense(32, activation=\"relu\"),\n","    tf.keras.layers.Dense(n_outputs, activation=\"softmax\"),\n","])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Nt5xuC67f96n","executionInfo":{"status":"ok","timestamp":1700463204598,"user_tz":-540,"elapsed":9235,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"212b62ac-337b-4e95-a7bb-6deba5e64254"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n","/usr/local/lib/python3.10/dist-packages/tensorflow/python/framework/dtypes.py:35: DeprecationWarning: ml_dtypes.float8_e4m3b11 is deprecated. Use ml_dtypes.float8_e4m3b11fnuz\n","  from tensorflow.tsl.python.lib.core import pywrap_ml_dtypes\n"]}]},{"cell_type":"code","source":["def lander_play_one_step(env, obs, model, loss_fn):\n","    with tf.GradientTape() as tape:\n","        probas = model(obs[np.newaxis])\n","        logits = tf.math.log(probas + tf.keras.backend.epsilon())\n","        action = tf.random.categorical(logits, num_samples=1)\n","        loss = tf.reduce_mean(loss_fn(action, probas))\n","    grads = tape.gradient(loss, model.trainable_variables)\n","    obs, reward, done, info, truncated = env.step(action[0, 0].numpy())\n","    return obs, reward, done, truncated, grads\n","\n","def lander_play_multiple_episodes(env, n_episodes, n_max_steps, model, loss_fn):\n","    all_rewards = []\n","    all_grads = []\n","    for episode in range(n_episodes):\n","        current_rewards = []\n","        current_grads = []\n","        obs, info = env.reset()\n","        for step in range(n_max_steps):\n","            obs, reward, done, truncated, grads = lander_play_one_step(\n","                env, obs, model, loss_fn)\n","            current_rewards.append(reward)\n","            current_grads.append(grads)\n","            if done or truncated:\n","                break\n","        all_rewards.append(current_rewards)\n","        all_grads.append(current_grads)\n","    return all_rewards, all_grads\n","\n","def discount_rewards(rewards, discount_factor):\n","    discounted = np.array(rewards)\n","    for step in range(len(rewards) - 2, -1, -1):\n","        discounted[step] += discounted[step + 1] * discount_factor\n","    return discounted\n","\n","def discount_and_normalize_rewards(all_rewards, discount_factor):\n","    all_discounted_rewards = [discount_rewards(rewards, discount_factor)\n","                              for rewards in all_rewards]\n","    flat_rewards = np.concatenate(all_discounted_rewards)\n","    reward_mean = flat_rewards.mean()\n","    reward_std = flat_rewards.std()\n","    return [(discounted_rewards - reward_mean) / reward_std\n","            for discounted_rewards in all_discounted_rewards]"],"metadata":{"id":"03S31zIbgXVx","executionInfo":{"status":"ok","timestamp":1700463230788,"user_tz":-540,"elapsed":396,"user":{"displayName":"김태식","userId":"11264777984025639378"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","source":["# 코랩의 메모리 부족을 피하기 위해 반복 횟수를 200에서 50으로 수정\n","n_iterations = 50\n","n_episodes_per_update = 16\n","# 코랩의 메모리 부족을 피하기 위해 최대 스텝 횟수를 1000에서 200으로 수정\n","n_max_steps = 200\n","discount_factor = 0.99\n","\n","optimizer = tf.keras.optimizers.Nadam(learning_rate=0.005)\n","loss_fn = tf.keras.losses.sparse_categorical_crossentropy"],"metadata":{"id":"Qoi1QzsIgZXX","executionInfo":{"status":"ok","timestamp":1700463232081,"user_tz":-540,"elapsed":2,"user":{"displayName":"김태식","userId":"11264777984025639378"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["env.reset(seed=42)\n","\n","mean_rewards = []\n","\n","for iteration in range(n_iterations):\n","    all_rewards, all_grads = lander_play_multiple_episodes(\n","        env, n_episodes_per_update, n_max_steps, model, loss_fn)\n","    mean_reward = sum(map(sum, all_rewards)) / n_episodes_per_update\n","    print(f\"\\r반복: {iteration + 1}/{n_iterations},\"\n","          f\" 평균 보상: {mean_reward:.1f}  \", end=\"\")\n","    mean_rewards.append(mean_reward)\n","    all_final_rewards = discount_and_normalize_rewards(all_rewards,\n","                                                       discount_factor)\n","    all_mean_grads = []\n","    for var_index in range(len(model.trainable_variables)):\n","        mean_grads = tf.reduce_mean(\n","            [final_reward * all_grads[episode_index][step][var_index]\n","             for episode_index, final_rewards in enumerate(all_final_rewards)\n","                 for step, final_reward in enumerate(final_rewards)], axis=0)\n","        all_mean_grads.append(mean_grads)\n","    optimizer.apply_gradients(zip(all_mean_grads, model.trainable_variables))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iJJKkcA7gbV8","executionInfo":{"status":"ok","timestamp":1700464168466,"user_tz":-540,"elapsed":935539,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"c49e445f-8958-4fd2-8def-d96055c4fd09"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["\r반복: 1/50, 평균 보상: -184.0  "]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:5 out of the last 5 calls to <function _BaseOptimizer._update_step_xla at 0x78240ab62950> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n","WARNING:tensorflow:6 out of the last 6 calls to <function _BaseOptimizer._update_step_xla at 0x78240ab62950> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"output_type":"stream","name":"stdout","text":["반복: 50/50, 평균 보상: -18.1  "]}]},{"cell_type":"code","source":["plt.plot(mean_rewards)\n","plt.xlabel(\"에피소드\")\n","plt.ylabel(\"평균 보상\")\n","plt.grid()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"gK1JCdNkggrt","executionInfo":{"status":"ok","timestamp":1700465447850,"user_tz":-540,"elapsed":429,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"76a23f8e-841f-44f7-c168-3e0f81304b05"},"execution_count":35,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def lander_render_policy_net(model, n_max_steps=500, seed=42):\n","    frames = []\n","    env = gym.make(\"LunarLander-v2\", render_mode=\"rgb_array\")\n","    tf.random.set_seed(seed)\n","    np.random.seed(seed)\n","    obs, info = env.reset(seed=seed)\n","    for step in range(n_max_steps):\n","        frames.append(env.render())\n","        probas = model(obs[np.newaxis])\n","        logits = tf.math.log(probas + tf.keras.backend.epsilon())\n","        action = tf.random.categorical(logits, num_samples=1)\n","        obs, reward, done, truncated, info = env.step(action[0, 0].numpy())\n","        if done or truncated:\n","            break\n","    env.close()\n","    return frames"],"metadata":{"id":"xX9GO7p2ghdC","executionInfo":{"status":"ok","timestamp":1700465450051,"user_tz":-540,"elapsed":286,"user":{"displayName":"김태식","userId":"11264777984025639378"}}},"execution_count":36,"outputs":[]},{"cell_type":"code","source":["frames = lander_render_policy_net(model, seed=42)\n","plot_animation(frames)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":576,"output_embedded_package_id":"11lR1Ob7rzoh9NZmD5elVuFKABp3VuBLm"},"id":"hWeJtRqpgh7-","executionInfo":{"status":"ok","timestamp":1700465488468,"user_tz":-540,"elapsed":29073,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"3d23c6ba-6417-4798-a034-2502fef597d5"},"execution_count":37,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]}]}