{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"A100","machine_shape":"hm","authorship_tag":"ABX9TyMXGkfXyGBpk1T++dUKPZmy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"GsNW7ql3jtDK"},"outputs":[],"source":["# RNN 파일 다운로드 1\n","!wget https://s3.amazonaws.com/keras-datasets/jena_climate_2009_2016.csv.zip\n","!unzip jena_climate_2009_2016.csv.zip"]},{"cell_type":"code","source":["# 데이터셋 조사 2\n","import os\n","fname = os.path.join(\"jena_climate_2009_2016.csv\")\n","\n","with open(fname) as f:\n","    data = f.read()\n","\n","lines = data.split(\"\\n\")\n","header = lines[0].split(\",\")\n","lines = lines[1:]\n","print(header)\n","print(len(lines))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5LCSZh_Mk_dG","executionInfo":{"status":"ok","timestamp":1698882503085,"user_tz":-540,"elapsed":2,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"f529f536-4792-41dd-e622-7596c673c9c8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['\"Date Time\"', '\"p (mbar)\"', '\"T (degC)\"', '\"Tpot (K)\"', '\"Tdew (degC)\"', '\"rh (%)\"', '\"VPmax (mbar)\"', '\"VPact (mbar)\"', '\"VPdef (mbar)\"', '\"sh (g/kg)\"', '\"H2OC (mmol/mol)\"', '\"rho (g/m**3)\"', '\"wv (m/s)\"', '\"max. wv (m/s)\"', '\"wd (deg)\"']\n","420451\n"]}]},{"cell_type":"code","source":["#데이터 파싱 3\n","import numpy as np\n","\n","temperature = np.zeros((len(lines),))  # 온도 데이터(input)\n","raw_data = np.zeros((len(lines), len(header) - 1)) # 나머지 데이터(feature)\n","for i, line in enumerate(lines):\n","    values = [float(x) for x in line.split(\",\")[1:]]\n","    temperature[i] = values[1]\n","    raw_data[i, :] = values[:]"],"metadata":{"id":"19NdCj6elnUa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from matplotlib import pyplot as plt\n","\n","plt.plot(range(1440),temperature[:1440])\n","plt.show()"],"metadata":{"id":"BygZT0XanPuC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 데이터 준비 4\n","# 50% 훈련, 25% 검증, 25% 테스트 그리고 검증,테스트가 훈련데이터보다 최신이어야함.\n","num_train_samples = int(0.5 * len(raw_data))\n","num_val_samples = int(0.25 * len(raw_data))\n","num_test_samples = len(raw_data) - num_train_samples, num_val_samples\n","\n","# 데이터 정규화 mean std 훈련데이터로 정규화 해야함\n","mean = raw_data[:num_train_samples].mean(axis = 0) #feature 평균(1개의 열 평균)\n","raw_data -= mean\n","std = raw_data[:num_train_samples].std(axis = 0)\n","raw_data /= std"],"metadata":{"id":"b0Gjhj3Nn-VI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 훈련, 검증, 데이터셋 만들기 5\n","from tensorflow import keras\n","\n","sampling_rate = 6\n","sequence_length = 120\n","delay = sampling_rate * (sequence_length + 24 - 1) # target\n","batch_size = 256\n","\n","train_dataset = keras.utils.timeseries_dataset_from_array(\n","    raw_data[:-delay],  # inputs\n","    targets=temperature[delay:], # target\n","    sampling_rate=sampling_rate, # 6이면 10분짜리 샘플을 60분마다\n","    sequence_length=sequence_length, # 한번에 120개씩\n","    shuffle=True, # 랜덤 site에서\n","    batch_size=batch_size,\n","    start_index=0,  # 0 부터 50% 까지\n","    end_index=num_train_samples)\n","\n","val_dataset = keras.utils.timeseries_dataset_from_array(\n","    raw_data[:-delay],\n","    targets=temperature[delay:],\n","    sampling_rate=sampling_rate,\n","    sequence_length=sequence_length,\n","    shuffle=True,\n","    batch_size=batch_size,\n","    start_index=num_train_samples, # 50 ~ 75%까지\n","    end_index=num_train_samples + num_val_samples)\n","\n","test_dataset = keras.utils.timeseries_dataset_from_array(\n","    raw_data[:-delay],\n","    targets=temperature[delay:],\n","    sampling_rate=sampling_rate,\n","    sequence_length=sequence_length,\n","    shuffle=True,\n","    batch_size=batch_size,\n","    start_index=num_train_samples + num_val_samples) # 75~ 100%까지"],"metadata":{"id":"0tpxVxjhsAhp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 단순한 모델 훈련하고 평가하기\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","\n","inputs = keras.Input(shape=(sequence_length, raw_data.shape[-1]))\n","x = layers.Flatten()(inputs)\n","x = layers.Dense(16, activation=\"relu\")(x)\n","outputs = layers.Dense(1)(x)\n","model = keras.Model(inputs, outputs)\n","\n","callbacks = [\n","    keras.callbacks.ModelCheckpoint(\"jena_dense.h5\",\n","                                    save_best_only=True)\n","]\n","model.compile(optimizer=\"rmsprop\", loss=\"mse\", metrics=[\"mae\"])\n","history = model.fit(train_dataset,\n","                    epochs=10,\n","                    validation_data=val_dataset,\n","                    callbacks=callbacks)\n","\n","#훈련이 끝나면 바로 최상의 모델을 불러오고 평가\n","model = keras.models.load_model(\"jena_dense.h5\")\n","print(f\"테스트 MAE: {model.evaluate(test_dataset)[1]:.2f}\")"],"metadata":{"id":"p1f9M40Bt4vg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","loss = history.history['mae']\n","val_loss = history.history['val_mae']\n","epochs = range(1, len(loss) + 1)\n","plt.figure()\n","plt.plot(epochs, loss, \"bo\", label = \"Training MAE\")\n","plt.plot(epochs, val_loss, \"b\", label = \"Validation MAE\")\n","plt.title(\"Training and Validation Loss\")\n","plt.legend()\n","plt.show()\n","# 무작위한 mae 약 2.5에 비해 크게 나을게 없음"],"metadata":{"id":"rV8yzasN5tSW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 간단한 LSTM 모델\n","\n","inputs = keras.Input(shape=(sequence_length, raw_data.shape[-1]))\n","x = layers.LSTM(16)(inputs)\n","outputs = layers.Dense(1)(x)\n","model = keras.Model(inputs, outputs)\n","\n","callbacks = [\n","    keras.callbacks.ModelCheckpoint(\"jena_lstm.h5\",\n","                                    save_best_only=True)\n","]\n","model.compile(optimizer=\"rmsprop\", loss=\"mse\", metrics=[\"mae\"])\n","history = model.fit(train_dataset,\n","                    epochs=10,\n","                    validation_data=val_dataset,\n","                    callbacks=callbacks)\n","\n","#훈련이 끝나면 바로 최상의 모델을 불러오고 평가\n","model = keras.models.load_model(\"jena_lstm.h5\")\n","print(f\"테스트 MAE: {model.evaluate(test_dataset)[1]:.2f}\")"],"metadata":{"id":"mKPqonhI66Ly"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["loss = history.history['mae']\n","val_loss = history.history['val_mae']\n","epochs = range(1, len(loss) + 1)\n","plt.figure()\n","plt.plot(epochs, loss, \"bo\", label = \"Training MAE\")\n","plt.plot(epochs, val_loss, \"b\", label = \"Validation MAE\")\n","plt.title(\"Training and Validation Loss\")\n","plt.legend()\n","plt.show()\n","#"],"metadata":{"id":"CGnB0eC2_M9V"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# dropout을 적용하고 순환상태 드롭아웃을 적용하며 epoch를 2배 늘린 GRU 모델\n","# 순환상태 드롭아웃은 모든 타입스텝에 똑같은 드롭아웃 마스크를 적용한다\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","\n","model = keras.Sequential()\n","inputs = keras.Input(shape=(sequence_length, raw_data.shape[-1]))\n","x = layers.GRU(32)(inputs)\n","x = layers.Dense(16, activation = 'tanh')(x)\n","x = layers.Dropout(0.5)(x)\n","outputs = layers.Dense(1)(x)\n","model = keras.Model(inputs, outputs)\n","\n","callbacks = [\n","    keras.callbacks.ModelCheckpoint(\"jena_lstm_dropout.h5\",\n","                                    save_best_only=True)\n","]\n","model.compile(optimizer=\"rmsprop\", loss=\"mse\", metrics=[\"mae\"])\n","history = model.fit(train_dataset,\n","                    epochs=30,\n","                    validation_data=val_dataset,\n","                    callbacks=callbacks)\n","\n","#훈련이 끝나면 바로 최상의 모델을 불러오고 평가\n","model = keras.models.load_model(\"jena_lstm_dropout.h5\")\n","print(f\"테스트 MAE: {model.evaluate(test_dataset)[1]:.2f}\")"],"metadata":{"id":"Ik1TrGVEICBn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","loss = history.history['mae']\n","val_loss = history.history['val_mae']\n","epochs = range(1, len(loss) + 1)\n","plt.figure()\n","plt.plot(epochs, loss, \"bo\", label = \"Training MAE\")\n","plt.plot(epochs, val_loss, \"b\", label = \"Validation MAE\")\n","plt.title(\"Training and Validation Loss\")\n","plt.legend()\n","plt.show()\n","\n","# 약 7~8 epochs 정도에서 2.3 , 2.4 정도를 달성하고 그 과대적합됨"],"metadata":{"id":"_8Vaxv8QT1VR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_loss , test_acc = model.evaluate(test_dataset)\n","print(f\"{test_loss:.3f}\")\n","print(f\"{test_acc:.3f}\")\n","# 10.208 / 2.496 -- 딱히 더 낫지않네."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"437g89RIUCtC","executionInfo":{"status":"ok","timestamp":1698883072868,"user_tz":-540,"elapsed":3227,"user":{"displayName":"김태식","userId":"11264777984025639378"}},"outputId":"1651ee24-e9ee-49ab-9f24-ad6dd8df907d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["405/405 [==============================] - 4s 9ms/step - loss: 10.2081 - mae: 2.4962\n","10.208\n","2.496\n"]}]}]}